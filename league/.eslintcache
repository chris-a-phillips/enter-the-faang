[{"/Users/esquire/code/projects/enter-the-faang/league/src/index.js":"1","/Users/esquire/code/projects/enter-the-faang/league/src/App.js":"2","/Users/esquire/code/projects/enter-the-faang/league/src/SCApp.js":"3","/Users/esquire/code/projects/enter-the-faang/league/src/Data/Unit.js":"4","/Users/esquire/code/projects/enter-the-faang/league/src/Data/FaangStats.js":"5","/Users/esquire/code/projects/enter-the-faang/league/src/Pages/WelcomeScreen/WelcomeScreen.js":"6","/Users/esquire/code/projects/enter-the-faang/league/src/Data/PlayerUnits.js":"7","/Users/esquire/code/projects/enter-the-faang/league/src/Data/EnemyUnits.js":"8","/Users/esquire/code/projects/enter-the-faang/league/src/Data/PlayerKingdoms.js":"9","/Users/esquire/code/projects/enter-the-faang/league/src/Pages/GameBoard/GameBoard.js":"10","/Users/esquire/code/projects/enter-the-faang/league/src/components/EnemyField/EnemyField.js":"11","/Users/esquire/code/projects/enter-the-faang/league/src/components/PlayerField/PlayerField.js":"12","/Users/esquire/code/projects/enter-the-faang/league/src/components/KingdomField/KingdomField.js":"13","/Users/esquire/code/projects/enter-the-faang/league/src/components/KingdomField/SCKingdomField.js":"14","/Users/esquire/code/projects/enter-the-faang/league/src/components/PlayerField/SCPlayerField.js":"15","/Users/esquire/code/projects/enter-the-faang/league/src/components/EnemyField/SCEnemyField.js":"16","/Users/esquire/code/projects/enter-the-faang/league/src/Data/SessionLogic.js":"17","/Users/esquire/code/projects/enter-the-faang/league/src/components/GameContext.js":"18","/Users/esquire/code/projects/enter-the-faang/league/src/Data/Cards.js":"19","/Users/esquire/code/projects/enter-the-faang/league/src/Pages/GameBoard/SCGameBoard.js":"20","/Users/esquire/code/projects/enter-the-faang/league/src/components/GameRules/GameRules.js":"21","/Users/esquire/code/projects/enter-the-faang/league/src/components/GameRules/SCGameRules.js":"22","/Users/esquire/code/projects/enter-the-faang/league/src/Pages/WelcomeScreen/SCWelcomeScreen.js":"23","/Users/esquire/code/projects/enter-the-faang/league/src/components/SessionInfo/SessionInfo.js":"24"},{"size":236,"mtime":1612132713936,"results":"25","hashOfConfig":"26"},{"size":2572,"mtime":1615870411235,"results":"27","hashOfConfig":"26"},{"size":191,"mtime":1611804813367,"results":"28","hashOfConfig":"26"},{"size":1107,"mtime":1610484726713,"results":"29","hashOfConfig":"26"},{"size":9315,"mtime":1611609709189,"results":"30","hashOfConfig":"26"},{"size":4570,"mtime":1615955361087,"results":"31","hashOfConfig":"26"},{"size":9025,"mtime":1615870411238,"results":"32","hashOfConfig":"26"},{"size":9576,"mtime":1615955647282,"results":"33","hashOfConfig":"26"},{"size":2873,"mtime":1615870411237,"results":"34","hashOfConfig":"26"},{"size":12724,"mtime":1615870411239,"results":"35","hashOfConfig":"26"},{"size":1550,"mtime":1615870411242,"results":"36","hashOfConfig":"26"},{"size":3375,"mtime":1615870411245,"results":"37","hashOfConfig":"26"},{"size":2598,"mtime":1615870411244,"results":"38","hashOfConfig":"26"},{"size":1998,"mtime":1615870411245,"results":"39","hashOfConfig":"26"},{"size":2891,"mtime":1612581501289,"results":"40","hashOfConfig":"26"},{"size":1682,"mtime":1612581501286,"results":"41","hashOfConfig":"26"},{"size":9765,"mtime":1613261658610,"results":"42","hashOfConfig":"26"},{"size":86,"mtime":1610826572545,"results":"43","hashOfConfig":"26"},{"size":7164,"mtime":1612581501276,"results":"44","hashOfConfig":"26"},{"size":2213,"mtime":1613261658612,"results":"45","hashOfConfig":"26"},{"size":1719,"mtime":1615870411243,"results":"46","hashOfConfig":"26"},{"size":1148,"mtime":1615870411243,"results":"47","hashOfConfig":"26"},{"size":3092,"mtime":1615870411240,"results":"48","hashOfConfig":"26"},{"size":562,"mtime":1615870411246,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"oulkl",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/Users/esquire/code/projects/enter-the-faang/league/src/index.js",[],["106","107"],"/Users/esquire/code/projects/enter-the-faang/league/src/App.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/SCApp.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/Data/Unit.js",[],["108","109"],"/Users/esquire/code/projects/enter-the-faang/league/src/Data/FaangStats.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/Pages/WelcomeScreen/WelcomeScreen.js",["110"],"/Users/esquire/code/projects/enter-the-faang/league/src/Data/PlayerUnits.js",["111"],"import React, { useEffect } from 'react';\nimport { faang } from './FaangStats';\n\nfunction PlayerUnits ({ trueSkill, setPlayerTeam }) {\n\tconst eliteStats = faang.elite;\n\n\t\tclass Titan {\n\t\t\tconstructor(\n\t\t\t\tname,\n\t\t\t\telement,\n\t\t\t\tkingdom,\n\t\t\t\tcurrentHealth,\n\t\t\t\tmaxHealth,\n\t\t\t\tattack,\n\t\t\t\tdefense,\n\t\t\t\tregeneration,\n\t\t\t\tspeed,\n\t\t\t\tenergy,\n\t\t\t\tzen,\n\t\t\t\tshowcase\n\t\t\t) {\n\t\t\t\t// specs\n\t\t\t\tthis.isAlive = true;\n\t\t\t\tthis.isTitan = true;\n\t\t\t\t// stats\n\t\t\t\tthis.name = name;\n\t\t\t\tthis.element = element;\n\t\t\t\tthis.kingdom = kingdom;\n\t\t\t\tthis.currentHealth = currentHealth;\n\t\t\t\tthis.maxHealth = maxHealth;\n\t\t\t\tthis.attack = attack;\n\t\t\t\tthis.defense = defense;\n\t\t\t\tthis.regenerationRate = (100 - regeneration) / 25;\n\t\t\t\tthis.speed = speed;\n\t\t\t\tthis.energy = energy;\n\t\t\t\tthis.zen = zen;\n\t\t\t\tthis.showcase = showcase;\n\t\t\t}\n\t\t\tregenerateHealth() {\n\t\t\t\tif (\n\t\t\t\t\tthis.currentHealth < this.maxHealth &&\n\t\t\t\t\tthis.regenerationRate > 0\n\t\t\t\t) {\n\t\t\t\t\tthis.currentHealth +=\n\t\t\t\t\t\tthis.currentHealth * (0.01 * this.regenerationRate);\n\t\t\t\t}\n\t\t\t}\n\t\t\tattackUnit(unit) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`${this.name} attacked ${unit.name} and now it has ${unit.currentHealth} health remaining`\n\t\t\t\t);\n\t\t\t\tunit.currentHealth -= this.attack;\n\t\t\t\tif (unit.currentHealth <= 0) {\n\t\t\t\t\tunit.isAlive = false;\n\t\t\t\t\tconsole.log(`${unit.name} died from the attack`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\tfunction averageStats(object) {\n\t\t// TURN THE OBJECT INTO AN ARRAY OF OBJECTS\n\t\tlet data = Object.entries(object);\n\t\t// CREATE AN ARRAY FOR MAPPED DATA TO GO INTO\n\t\tlet dataArray = [];\n\t\t// CREATE AN OBJECT TO HOLD ALL STATS FROM MAPPED ARRAY\n\t\tlet statsObject = {\n\t\t\thealth: [],\n\t\t\tattack: [],\n\t\t\tdefense: [],\n\t\t\tregeneration: [],\n\t\t\tspeed: [],\n\t\t\ttotal: [],\n\t\t};\n\t\t// PUSH SEPARATE DATA SO IT CAN BE MUTATED\n\t\tdata.forEach((e) => {\n            dataArray.push(e[1]);\n\t\t});\n\t\t// PUSH ALL STATS INTO STATS OBJECT\n\t\tfor (let i = 0; i < dataArray.length; i++) {\n\t\t\tstatsObject.health.push(dataArray[i].health);\n\t\t\tstatsObject.attack.push(dataArray[i].attack);\n\t\t\tstatsObject.defense.push(dataArray[i].defense);\n\t\t\tstatsObject.regeneration.push(dataArray[i].regeneration);\n\t\t\tstatsObject.speed.push(dataArray[i].speed);\n\t\t\tstatsObject.total.push(dataArray[i].total);\n\t\t}\n\n\t\t// REDUCE ALL STATS IN EACH ARRAY INTO ONE VALUE\n\t\t// health\n\t\tstatsObject.health =\n\t\t\tstatsObject.health.reduce((a, b) => a + b, 0) /\n\t\t\tstatsObject.health.length;\n\t\t// attack\n\t\tstatsObject.attack =\n\t\t\tstatsObject.attack.reduce((a, b) => a + b, 0) /\n\t\t\tstatsObject.attack.length;\n\t\t// defense\n\t\tstatsObject.defense =\n\t\t\tstatsObject.defense.reduce((a, b) => a + b, 0) /\n\t\t\tstatsObject.defense.length;\n\t\t// regeneration\n\t\tstatsObject.regeneration =\n\t\t\tstatsObject.regeneration.reduce((a, b) => a + b, 0) /\n\t\t\tstatsObject.regeneration.length;\n\t\t// speed\n\t\tstatsObject.speed =\n\t\t\tstatsObject.speed.reduce((a, b) => a + b, 0) /\n\t\t\tstatsObject.speed.length;\n\t\t// total\n\t\tstatsObject.total =\n\t\t\tstatsObject.total.reduce((a, b) => a + b, 0) /\n            statsObject.total.length;\n        return statsObject\n\t}\n\n    const titans = {\n\t\tfire: {\n\t\t\thealth: 6,\n\t\t\tattack: 9,\n\t\t\tdefense: 5,\n\t\t\tenergy: 8,\n\t\t\tregeneration: 4,\n\t\t\tspeed: 7,\n\t\t\tzen: 5,\n\t\t\tcolors: {\n\t\t\t\tprimary: '#F7130A',\n\t\t\t\tsecondary: '#ED7609',\n\t\t\t\tcontrast: '#E02A02',\n\t\t\t},\n\t\t},\n\t\twater: {\n\t\t\thealth: 9,\n\t\t\tattack: 5,\n\t\t\tdefense: 7,\n\t\t\tenergy: 5,\n\t\t\tregeneration: 8,\n\t\t\tspeed: 6,\n\t\t\tzen: 4,\n\t\t\tcolors: {\n\t\t\t\tprimary: '#2F30E0',\n\t\t\t\tsecondary: '#268FED',\n\t\t\t\tcontrast: '#9326ED',\n\t\t\t},\n\t\t},\n\t\tstone: {\n\t\t\thealth: 8,\n\t\t\tattack: 5,\n\t\t\tdefense: 9,\n\t\t\tenergy: 4,\n\t\t\tregeneration: 6,\n\t\t\tspeed: 5,\n\t\t\tzen: 7,\n\t\t\tcolors: {\n\t\t\t\tprimary: '#706459',\n\t\t\t\tsecondary: '#877A64',\n\t\t\t\tcontrast: '#5F727D',\n\t\t\t},\n\t\t},\n\t\tair: {\n\t\t\thealth: 4,\n\t\t\tattack: 6,\n\t\t\tdefense: 5,\n\t\t\tenergy: 9,\n\t\t\tregeneration: 7,\n\t\t\tspeed: 8,\n\t\t\tzen: 5,\n\t\t\tcolors: {\n\t\t\t\tprimary: '#D0DAD8',\n\t\t\t\tsecondary: '#CFDEE6',\n\t\t\t\tcontrast: '#CFE6D4',\n\t\t\t},\n\t\t},\n\t\tlightning: {\n\t\t\thealth: 5,\n\t\t\tattack: 8,\n\t\t\tdefense: 4,\n\t\t\tenergy: 7,\n\t\t\tregeneration: 5,\n\t\t\tspeed: 9,\n\t\t\tzen: 6,\n\t\t\tcolors: {\n\t\t\t\tprimary: '#FAED3E',\n\t\t\t\tsecondary: '#E3D346',\n\t\t\t\tcontrast: '#23FAF5',\n\t\t\t},\n\t\t},\n\t\tterra: {\n\t\t\thealth: 7,\n\t\t\tattack: 4,\n\t\t\tdefense: 6,\n\t\t\tenergy: 5,\n\t\t\tregeneration: 9,\n\t\t\tspeed: 5,\n\t\t\tzen: 8,\n\t\t\tcolors: {\n\t\t\t\tprimary: '#3AC92A',\n\t\t\t\tsecondary: '#24E04A',\n\t\t\t\tcontrast: '#8B4513',\n\t\t\t},\n\t\t},\n\t\tmetal: {\n\t\t\thealth: 5,\n\t\t\tattack: 7,\n\t\t\tdefense: 8,\n\t\t\tenergy: 6,\n\t\t\tregeneration: 5,\n\t\t\tspeed: 4,\n\t\t\tzen: 9,\n\t\t\tcolors: {\n\t\t\t\tprimary: '#DBDBDB',\n\t\t\t\tsecondary: '#C4C4C4',\n\t\t\t\tcontrast: '#B5B5B5',\n\t\t\t},\n\t\t},\n\t};\n    \n    const fireTitan = new Titan(\n\t\t'Ajna',\n\t\t'Fire',\n\t\t'Fire Kingdom',\n        Math.floor(averageStats(eliteStats).health * (titans.fire.health * .1)),\n        Math.floor(averageStats(eliteStats).health * (titans.fire.health * .1)),\n        averageStats(eliteStats).attack * (titans.fire.attack * .1),\n        averageStats(eliteStats).defense * (titans.fire.defense * .1),\n        averageStats(eliteStats).regeneration * (titans.fire.regeneration * .1),\n        averageStats(eliteStats).speed * (titans.fire.speed * .1),\n        titans.fire.energy,\n        titans.fire.zen,\n        titans.fire\n    );\n\n    const waterTitan = new Titan(\n\t\t'Mulad',\n\t\t'Water',\n\t\t'Water Kingdom',\n        Math.floor(averageStats(eliteStats).health * (titans.water.health * .1)),\n        Math.floor(averageStats(eliteStats).health * (titans.water.health * .1)),\n        averageStats(eliteStats).attack * (titans.water.attack * .1),\n        averageStats(eliteStats).defense * (titans.water.defense * .1),\n        averageStats(eliteStats).regeneration * (titans.water.regeneration * .1),\n        averageStats(eliteStats).speed * (titans.water.speed * .1),\n        titans.water.energy,\n        titans.water.zen,\n        titans.water\n    );\n\n    const stoneTitan = new Titan(\n\t\t'Vishu',\n\t\t'Rock',\n\t\t'Stone Kingdom',\n        Math.floor(averageStats(eliteStats).health * (titans.stone.health * .1)),\n        Math.floor(averageStats(eliteStats).health * (titans.stone.health * .1)),\n        averageStats(eliteStats).attack * (titans.stone.attack * .1),\n        averageStats(eliteStats).defense * (titans.stone.defense * .1),\n        averageStats(eliteStats).regeneration * (titans.stone.regeneration * .1),\n        averageStats(eliteStats).speed * (titans.stone.speed * .1),\n        titans.stone.energy,\n        titans.stone.zen,\n        titans.stone\n    );\n\n    const airTitan = new Titan(\n\t\t'Nabhi',\n\t\t'Air',\n\t\t'Air Kingdom',\n        Math.floor(averageStats(eliteStats).health * (titans.air.health * .1)),\n        Math.floor(averageStats(eliteStats).health * (titans.air.health * .1)),\n        averageStats(eliteStats).attack * (titans.air.attack * .1),\n        averageStats(eliteStats).defense * (titans.air.defense * .1),\n        averageStats(eliteStats).regeneration * (titans.air.regeneration * .1),\n        averageStats(eliteStats).speed * (titans.air.speed * .1),\n        titans.air.energy,\n        titans.air.zen,\n        titans.air\n    );\n\n    const lightningTitan = new Titan(\n\t\t'Svadhi',\n\t\t'Electricity',\n\t\t'Lightning Kingdom',\n        Math.floor(averageStats(eliteStats).health * (titans.lightning.health * .1)),\n        Math.floor(averageStats(eliteStats).health * (titans.lightning.health * .1)),\n        averageStats(eliteStats).attack * (titans.lightning.attack * .1),\n        averageStats(eliteStats).defense * (titans.lightning.defense * .1),\n        averageStats(eliteStats).regeneration * (titans.lightning.regeneration * .1),\n        averageStats(eliteStats).speed * (titans.lightning.speed * .1),\n        titans.lightning.energy,\n        titans.lightning.zen,\n        titans.lightning\n    );\n\n    const terraTitan = new Titan(\n\t\t'Sahas',\n\t\t'Plant',\n\t\t'Terra Kingdom',\n        Math.floor(averageStats(eliteStats).health * (titans.terra.health * .1)),\n        Math.floor(averageStats(eliteStats).health * (titans.terra.health * .1)),\n        averageStats(eliteStats).attack * (titans.terra.attack * .1),\n        averageStats(eliteStats).defense * (titans.terra.defense * .1),\n        averageStats(eliteStats).regeneration * (titans.terra.regeneration * .1),\n        averageStats(eliteStats).speed * (titans.terra.speed * .1),\n        titans.terra.energy,\n        titans.terra.zen,\n        titans.terra\n    );\n\n    const metalTitan = new Titan(\n\t\t'Anaht',\n\t\t'Metal',\n\t\t'Metal Kingdom',\n        Math.floor(averageStats(eliteStats).health * (titans.metal.health * .1)),\n        Math.floor(averageStats(eliteStats).health * (titans.metal.health * .1)),\n        averageStats(eliteStats).attack * (titans.metal.attack * .1),\n        averageStats(eliteStats).defense * (titans.metal.defense * .1),\n        averageStats(eliteStats).regeneration * (titans.metal.regeneration * .1),\n        averageStats(eliteStats).speed * (titans.metal.speed * .1),\n        titans.metal.energy,\n        titans.metal.zen,\n        titans.metal\n    );\n\n    useEffect(() => {\n\t\tsetPlayerTeam([fireTitan, waterTitan, stoneTitan, airTitan, lightningTitan, terraTitan, metalTitan]);\n    },[])\n\n\treturn <div></div>;\n};\n\nexport default PlayerUnits;\n","/Users/esquire/code/projects/enter-the-faang/league/src/Data/EnemyUnits.js",["112"],"/Users/esquire/code/projects/enter-the-faang/league/src/Data/PlayerKingdoms.js",["113"],"import React, { useEffect } from 'react';\n\nfunction PlayerKingdoms ({ setPlayerKingdoms, playerTeam }) {\n\n\tclass Kingdom {\n\t\tconstructor(\n\t\t\tname,\n\t\t\tmaxHealth,\n\t\t\tcurrentHealth,\n\t\t\tdefense,\n\t\t\tregenerationRate,\n\t\t\tshowcase\n\t\t) {\n\t\t\t// specs\n\t\t\tthis.isAlive = true;\n\t\t\tthis.isKingdom = true;\n\t\t\t// stats\n\t\t\tthis.name = name;\n\t\t\tthis.maxHealth = maxHealth;\n\t\t\tthis.currentHealth = currentHealth;\n\t\t\tthis.defense = defense;\n\t\t\tthis.regenerationRate = regenerationRate;\n\t\t\tthis.showcase = showcase;\n\t\t\tthis.speed = 0;\n\t\t}\n\t\tregenerateHealth() {\n\t\t\tif (\n\t\t\t\tthis.currentHealth < this.maxHealth &&\n\t\t\t\tthis.regenerationRate > 0\n\t\t\t) {\n\t\t\t\tthis.currentHealth +=\n\t\t\t\t\tthis.currentHealth * (0.01 * this.regenerationRate);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst fireKingdom = new Kingdom(\n\t\t'Fire Kingdom',\n\t\tMath.floor({ ...playerTeam[0] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[0] }.currentHealth) * 3,\n\t\t{ ...playerTeam[0] }.defense,\n\t\t{ ...playerTeam[0] }.regenerationRate,\n\t\t{ ...playerTeam[0] }.showcase,\n\t);\n\n\tconst waterKingdom = new Kingdom(\n\t\t'Water Kingdom',\n\t\tMath.floor({ ...playerTeam[1] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[1] }.currentHealth) * 3,\n\t\t{ ...playerTeam[1] }.defense,\n\t\t{ ...playerTeam[1] }.regenerationRate,\n\t\t{ ...playerTeam[1] }.showcase,\n\t);\n\n\tconst stoneKingdom = new Kingdom(\n\t\t'Stone Kingdom',\n\t\tMath.floor({ ...playerTeam[2] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[2] }.currentHealth) * 3,\n\t\t{ ...playerTeam[2] }.defense,\n\t\t{ ...playerTeam[2] }.regenerationRate,\n\t\t{ ...playerTeam[2] }.showcase,\n\t);\n\n\tconst airKingdom = new Kingdom(\n\t\t'Air Kingdom',\n\t\tMath.floor({ ...playerTeam[3] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[3] }.currentHealth) * 3,\n\t\t{ ...playerTeam[3] }.defense,\n\t\t{ ...playerTeam[3] }.regenerationRate,\n\t\t{ ...playerTeam[3] }.showcase,\n\t);\n\n\tconst lightningKingdom = new Kingdom(\n\t\t'Lightning Kingdom',\n\t\tMath.floor({ ...playerTeam[4] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[4] }.currentHealth) * 3,\n\t\t{ ...playerTeam[4] }.defense,\n\t\t{ ...playerTeam[4] }.regenerationRate,\n\t\t{ ...playerTeam[4] }.showcase,\n\t);\n\n\tconst terraKingdom = new Kingdom(\n\t\t'Terra Kingdom',\n\t\tMath.floor({ ...playerTeam[5] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[5] }.currentHealth) * 3,\n\t\t{ ...playerTeam[5] }.defense,\n\t\t{ ...playerTeam[5] }.regenerationRate,\n\t\t{ ...playerTeam[5] }.showcase,\n\t);\n\n\tconst metalKingdom = new Kingdom(\n\t\t'Metal Kingdom',\n\t\tMath.floor({ ...playerTeam[6] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[6] }.currentHealth) * 3,\n\t\t{ ...playerTeam[6] }.defense,\n\t\t{ ...playerTeam[6] }.regenerationRate,\n\t\t{ ...playerTeam[6] }.showcase,\n\t);\n\n\tuseEffect(() => {\n\t\tsetPlayerKingdoms([\n\t\t\tfireKingdom,\n\t\t\twaterKingdom,\n\t\t\tstoneKingdom,\n\t\t\tairKingdom,\n\t\t\tlightningKingdom,\n\t\t\tterraKingdom,\n\t\t\tmetalKingdom,\n\t\t]);\n\t}, []);\n\n\treturn <div></div>;\n};\n\nexport default PlayerKingdoms;\n","/Users/esquire/code/projects/enter-the-faang/league/src/Pages/GameBoard/GameBoard.js",["114","115","116"],"import React, { useState, useContext, useEffect, useCallback } from 'react';\nimport EnemyField from '../../components/EnemyField/EnemyField';\nimport KingdomField from '../../components/KingdomField/KingdomField';\nimport PlayerField from '../../components/PlayerField/PlayerField';\nimport { GameContext } from '../../components/GameContext';\nimport { allCards } from '../../Data/Cards';\nimport {\n\tActionContainer,\n\tBoardContainer,\n\tEnemyFieldContainer,\n\tGameBoardWrapper,\n\tGameInfoContainer,\n\tGameRulesModal,\n\tKingdomFieldContainer,\n\tPlayerFieldContainer,\n\tSessionLogContainer,\n} from './SCGameBoard';\nimport GameRules from '../../components/GameRules/GameRules';\nimport SessionInfo from '../../components/SessionInfo/SessionInfo';\n\nfunction GameBoard({\n\tenemyUnits,\n\tplayerTeam,\n\tsetPlayerTeam,\n\tplayerKingdoms,\n\tsession,\n\tallUnitsOnField,\n\tsetAllUnitsOnField,\n}) {\n\tconst [showRules, setShowRules] = useState(false);\n\n\tconst { involved, setInvolved } = useContext(GameContext);\n\tconsole.log('PLAYER KINGDOMS', playerKingdoms);\n\t// console.log('PLAYER TEAM', playerTeam);\n\t// console.log('ENEMY UNITS', enemyUnits);\n\n\tconst functions = {\n\t\t// 1 setInvolved initiator to specific object (choose)\n\t\t// 2 setInvolved possibleTargets\n\t\t// 3 setInvolved selectedTarget (select)\n\t\t// reset setInvolved\n\n\t\t// CARD, SELECT, CHOOSE, ACTION\n\n\t\t// select this action with the click\n\t\tuseCard: function useCard(a) {\n\t\t\tsession.phase = 'Card Selection';\n\t\t\t// 1 SELECT\n\t\t\tconsole.log(a, 'was card used 1');\n\t\t\t// set initiator to where the button was clicked\n\t\t\t// set action to what was clicked\n\t\t\tsetInvolved({ ...involved, card: a, action: a.type });\n\t\t},\n\n\t\t// initiate this action once select is opened\n\t\tinitiate: function initiate(b) {\n\t\t\t// 2 initiate\n\t\t\t// do stuff only if button was clicked\n\t\t\tif (involved.action && !involved.initiator) {\n\t\t\t\t// set selected target to the next click\n\t\t\t\tsetInvolved({ ...involved, initiator: b });\n\t\t\t\t// depending on the action do something\n\t\t\t}\n\t\t\tconsole.log(b, 'was object that initiated 2');\n\t\t},\n\t\tchoose: function choose(c) {\n\t\t\t// 3 ACTION for cards\n\t\t\t// setInvolved({ ...involved, selectedTarget: c})\n\t\t\t// perform this action using the selected target\n\t\t\tif (involved.initiator && involved.card) {\n\t\t\t\tinvolved.initiator.method = function useCard() {\n\t\t\t\t\treturn involved.card.effect(involved.initiator, c);\n\t\t\t\t};\n\t\t\t\t// console.log(involved.initiator)\n\t\t\t\t// set action to falsey so only this click is registered\n\t\t\t\tsetInvolved(false);\n\t\t\t}\n\t\t},\n\n\t\t// actions to take\n\t\t// attacker is where the first button was clicked (involved.initiator)\n\t\t// target is the second click (involved.selectedTarget)\n\t\tattack: function attack(attacker, target) {\n\t\t\t// 3 ACTION for enemies\n\t\t\tsetInvolved({\n\t\t\t\t...involved,\n\t\t\t\tpossibleTargets: [\n\t\t\t\t\tplayerTeam[0],\n\t\t\t\t\tplayerTeam[1],\n\t\t\t\t\tplayerKingdoms[0],\n\t\t\t\t\tplayerKingdoms[1],\n\t\t\t\t\tplayerKingdoms[2],\n\t\t\t\t\tplayerKingdoms[3],\n\t\t\t\t\tplayerKingdoms[4],\n\t\t\t\t\tplayerKingdoms[5],\n\t\t\t\t\tplayerKingdoms[6],\n\t\t\t\t],\n\t\t\t});\n\t\t\tif (attacker !== target) {\n\t\t\t\tif (attacker.isFaang === true) {\n\t\t\t\t\t// do something else\n\t\t\t\t} else {\n\t\t\t\t\tattacker.attackUnit(target);\n\t\t\t\t\tconsole.log('it works');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t}\n\t\t},\n\n\t\tcheck: function check(array) {\n\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\tif (array[i].isAlive === false || array[i].isUsed) {\n\t\t\t\t\tarray.splice(i, 1);\n\t\t\t\t\t// console.log(`${array[i].name} was spliced at:`, i);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn array;\n\t\t},\n\t\tstandBy: function standBy() {\n\t\t\tsession.enhanceZen(playerTeam[0], playerTeam[1]);\n\t\t\tswitch (session.currentZenscape.name) {\n\t\t\t\tcase 'Enhance':\n\t\t\t\t\tif (playerTeam[0]) {\n\t\t\t\t\t\tplayerTeam[0].attack +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[0].defense +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[0].currentHealth +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[0].maxHealth +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[0].speed +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[0].zen += session.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[0].regenerationRate +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (playerTeam[1]) {\n\t\t\t\t\t\tplayerTeam[1].attack +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[1].defense +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[1].currentHealth +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[1].maxHealth +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[1].speed +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[1].zen += session.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[1].regenerationRate +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t// case 'Spore':\n\t\t\t\t// \t// code block\n\t\t\t\t// \tbreak;\n\t\t\t\tcase 'Swamp':\n\t\t\t\t\tif (enemyUnits[0]) {\n\t\t\t\t\t\tenemyUnits[0].speed -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[1]) {\n\t\t\t\t\t\tenemyUnits[1].speed -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[2]) {\n\t\t\t\t\t\tenemyUnits[2].speed -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[3]) {\n\t\t\t\t\t\tenemyUnits[3].speed -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[4]) {\n\t\t\t\t\t\tenemyUnits[4].speed -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Ice':\n\t\t\t\t\tif (enemyUnits[0]) {\n\t\t\t\t\t\tenemyUnits[0].attack -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[1]) {\n\t\t\t\t\t\tenemyUnits[1].attack -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[2]) {\n\t\t\t\t\t\tenemyUnits[2].attack -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[3]) {\n\t\t\t\t\t\tenemyUnits[3].attack -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[4]) {\n\t\t\t\t\t\tenemyUnits[4].attack -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log('no standby effect');\n\t\t\t}\n\t\t},\n\n\t\tbattle: function battle() {\n\t\t\tsetAllUnitsOnField(listUnits());\n\t\t\tallUnitsOnField\n\t\t\t\t.sort((a, b) => (a.speed < b.speed ? 1 : -1))\n\t\t\t\t.forEach((u) => {\n\t\t\t\t\t// MAKE SURE TIME IS NOT WASTED ON KINGDOMS AS THEY DON'T USE CARDS\n\t\t\t\t\tif (!u.isKingdom) {\n\t\t\t\t\t\t// EACH TITAN ATTACKS FROM THE QUEUE\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tif (u.method) {\n\t\t\t\t\t\t\t\tsession.eventLog.unshift(u.method());\n\t\t\t\t\t\t\t\t// CLEAR METHOD SO THERE ARE NO DUPLICATES\n\t\t\t\t\t\t\t\tu.method = null;\n\t\t\t\t\t\t\t\t// IF ZENSCAPE IS STORM, TITAN ATTACKS HAVE SPLASH DAMAGE\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tsession.currentZenscape.name === 'Storm' &&\n\t\t\t\t\t\t\t\t\tMath.random() * 100 <\n\t\t\t\t\t\t\t\t\t\tsession.currentZenscape.intensity\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tallUnitsOnField.forEach((u) => {\n\t\t\t\t\t\t\t\t\t\tif (u.isFaang) {\n\t\t\t\t\t\t\t\t\t\t\tu.currentHealth -=\n\t\t\t\t\t\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// EACH ENEMY ATTACKS A RANDOM UNIT\n\t\t\t\t\t\t\tif (u.isFaang) {\n\t\t\t\t\t\t\t\tlet possibleTargets = allUnitsOnField.filter(\n\t\t\t\t\t\t\t\t\t(unit) => !unit.isFaang\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t// IF ZENSCAPE IS GLARE, ENEMIES MAY ATTACK EACH OTHER\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tsession.currentZenscape.name === 'Glare' &&\n\t\t\t\t\t\t\t\t\tMath.random() * 100 <\n\t\t\t\t\t\t\t\t\t\tsession.currentZenscape.intensity\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tpossibleTargets = allUnitsOnField;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsession.eventLog.unshift(\n\t\t\t\t\t\t\t\t\tu.attackUnit(\n\t\t\t\t\t\t\t\t\t\tpossibleTargets[\n\t\t\t\t\t\t\t\t\t\t\tMath.floor(\n\t\t\t\t\t\t\t\t\t\t\t\tMath.random() *\n\t\t\t\t\t\t\t\t\t\t\t\t\tpossibleTargets.length\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tu.status.flash = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.check(playerTeam);\n\t\t\t\t\t\t\tthis.check(playerKingdoms);\n\t\t\t\t\t\t\tthis.check(enemyUnits);\n\t\t\t\t\t\t\tthis.check(allCards);\n\t\t\t\t\t\t\tsetAllUnitsOnField(listUnits());\n\t\t\t\t\t\t}, session.notificationTimer);\n\t\t\t\t\t\tsession.notificationTimer += 1500;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\t\tpostBattle: function postBattle() {\n\t\t\tsetTimeout(() => {\n\t\t\t\tsession.eventLog.unshift({\n\t\t\t\t\tevent: `${session.currentZenscape.name} is now ${session.currentZenscape.intensity}`,\n\t\t\t\t\tgradientOne: playerTeam[0].showcase.colors.primary,\n\t\t\t\t\tgradientTwo: playerTeam[1].showcase.colors.primary,\n\t\t\t\t});\n\t\t\t\tsession.eventLog.unshift({\n\t\t\t\t\tevent: 'PLAYER TURN',\n\t\t\t\t});\n\t\t\t\tfunctions.afterEffects();\n\t\t\t\tsession.phase = 'Selection';\n\t\t\t\tsetAllUnitsOnField(listUnits());\n\t\t\t\tsession.notificationTimer = 0;\n\t\t\t}, session.notificationTimer);\n\t\t\tconsole.log(session.eventLog);\n\t\t},\n\t\tafterEffects: function afterEffects() {\n\t\t\tswitch (session.currentZenscape.name) {\n\t\t\t\tcase 'Blaze':\n\t\t\t\t\tif (playerTeam[0]) {\n\t\t\t\t\t\tplayerTeam[0].attack +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (playerTeam[1]) {\n\t\t\t\t\t\tplayerTeam[1].attack +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Lava':\n\t\t\t\t\tif (enemyUnits[0]) {\n\t\t\t\t\t\tenemyUnits[0].currentHealth -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[1]) {\n\t\t\t\t\t\tenemyUnits[1].currentHealth -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[2]) {\n\t\t\t\t\t\tenemyUnits[2].currentHealth -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[3]) {\n\t\t\t\t\t\tenemyUnits[3].currentHealth -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[4]) {\n\t\t\t\t\t\tenemyUnits[4].currentHealth -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Sandstorm':\n\t\t\t\t\tif (enemyUnits[0]) {\n\t\t\t\t\t\tenemyUnits[0].regenerationRate -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[1]) {\n\t\t\t\t\t\tenemyUnits[1].regenerationRate -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[2]) {\n\t\t\t\t\t\tenemyUnits[2].regenerationRate -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[3]) {\n\t\t\t\t\t\tenemyUnits[3].regenerationRate -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[4]) {\n\t\t\t\t\t\tenemyUnits[4].regenerationRate -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Spring':\n\t\t\t\t\tif (playerTeam[0]) {\n\t\t\t\t\t\tplayerTeam[0].energy +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (playerTeam[1]) {\n\t\t\t\t\t\tplayerTeam[1].energy +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Steam':\n\t\t\t\t\tif (playerTeam[0]) {\n\t\t\t\t\t\tplayerTeam[0].regenerationRate +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (playerTeam[1]) {\n\t\t\t\t\t\tplayerTeam[1].regenerationRate +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log('no after effect');\n\t\t\t}\n\t\t\tallUnitsOnField.forEach((u) => {\n\t\t\t\tu.regenerateHealth();\n\t\t\t});\n\t\t},\n\t};\n\n\tconsole.log(session.eventLog);\n\n\tfunction endTurn() {\n\t\tfunctions.standBy();\n\t\tfunctions.battle();\n\t\tfunctions.postBattle();\n\t}\n\n\tconst listUnits = useCallback(() => {\n\t\tlet res = [];\n\t\tfor (let i = 0; i < playerTeam.slice(0, 2).length; i++) {\n\t\t\tres.push(playerTeam[i]);\n\t\t}\n\t\tfor (let i = 0; i < playerKingdoms.length; i++) {\n\t\t\tres.push(playerKingdoms[i]);\n\t\t}\n\t\tfor (let i = 0; i < enemyUnits.slice(0, 5).length; i++) {\n\t\t\tres.push(enemyUnits[i]);\n\t\t}\n\t\treturn res;\n\t}, [enemyUnits, playerTeam, playerKingdoms]);\n\n\tuseEffect(() => {\n\t\tif (playerTeam) {\n\t\t\tsetAllUnitsOnField(listUnits());\n\t\t}\n\t}, [enemyUnits, playerTeam, playerKingdoms, session, session.eventLog]);\n\n\treturn (\n\t\t<GameBoardWrapper>\n\t\t\t<GameInfoContainer>\n\t\t\t\t{session.currentZenscape !== null ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<SessionInfo session={session} />\n\t\t\t\t\t\t<button onClick={() => setShowRules(!showRules)}>\n\t\t\t\t\t\t\tGame Rules\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button onClick={endTurn}>End Turn</button>\n\t\t\t\t\t\t{showRules ? (\n\t\t\t\t\t\t\t<GameRules\n\t\t\t\t\t\t\t\tshowRules={showRules}\n\t\t\t\t\t\t\t\tsetShowRules={setShowRules}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</>\n\t\t\t\t) : null}\n\t\t\t\t<SessionLogContainer allUnitsOnField={allUnitsOnField}>\n\t\t\t\t\t<h1>Event Log</h1>\n\t\t\t\t\t{session.eventLog.slice(0, 9).map((action) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<ActionContainer\n\t\t\t\t\t\t\t\taction={action}\n\t\t\t\t\t\t\t\tkey={session.eventLog.indexOf(action)}>\n\t\t\t\t\t\t\t\t<p>{action.event}</p>\n\t\t\t\t\t\t\t</ActionContainer>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</SessionLogContainer>\n\t\t\t</GameInfoContainer>\n\t\t\t{enemyUnits && playerTeam && playerKingdoms ? (\n\t\t\t\t<>\n\t\t\t\t\t<EnemyFieldContainer>\n\t\t\t\t\t\t<EnemyField\n\t\t\t\t\t\t\tenemyUnits={enemyUnits}\n\t\t\t\t\t\t\tfunctions={functions}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</EnemyFieldContainer>\n\t\t\t\t\t<PlayerFieldContainer>\n\t\t\t\t\t\t<PlayerField\n\t\t\t\t\t\t\tplayerTeam={playerTeam}\n\t\t\t\t\t\t\tsetPlayerTeam={setPlayerTeam}\n\t\t\t\t\t\t\tfunctions={functions}\n\t\t\t\t\t\t\tallCards={allCards}\n\t\t\t\t\t\t\tsession={session}\n\t\t\t\t\t\t\tsetAllUnitsOnField={setAllUnitsOnField}\n\t\t\t\t\t\t\tlistUnits={listUnits}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</PlayerFieldContainer>\n\t\t\t\t\t<KingdomFieldContainer>\n\t\t\t\t\t\t<KingdomField\n\t\t\t\t\t\t\tplayerKingdoms={playerKingdoms}\n\t\t\t\t\t\t\tfunctions={functions}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</KingdomFieldContainer>\n\t\t\t\t</>\n\t\t\t) : null}\n\t\t</GameBoardWrapper>\n\t);\n}\n\nexport default GameBoard;\n","/Users/esquire/code/projects/enter-the-faang/league/src/components/EnemyField/EnemyField.js",["117","118"],"import React, { useState, useEffect } from 'react';\n\nimport {\n\tEnemyFieldWrapper,\n\tEnemyFieldLabel,\n\tEnemyFlexContainer,\n\tFaangContainer,\n\tFaangName,\n\tHealthBar,\n\tHealthBarContainer,\n\tFaangHeader,\n\tFaangContent,\n\tEnemyRank,\n} from './SCEnemyField';\n\nfunction EnemyField({ enemyUnits, functions }) {\n\tconst [enemyInfo, setEnemyInfo] = useState('');\n\n\tuseEffect(() => {}, [enemyUnits]);\n\n\treturn (\n\t\t<EnemyFieldWrapper>\n\t\t\t<EnemyFieldLabel>\n\t\t\t\t<h3>Enemies Remaining: {enemyUnits.length}</h3>\n\t\t\t</EnemyFieldLabel>\n\t\t\t<EnemyFlexContainer>\n\t\t\t\t{enemyUnits.slice(0, 5).map((unit) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<FaangContainer\n\t\t\t\t\t\t\tunit={unit}\n\t\t\t\t\t\t\tkey={enemyUnits.indexOf(unit)}\n\t\t\t\t\t\t\tonClick={() => functions.choose(unit)}>\n\t\t\t\t\t\t\t<FaangContent unit={unit}>\n\t\t\t\t\t\t\t\t<FaangHeader unit={unit}>\n\t\t\t\t\t\t\t\t\t<FaangName>\n\t\t\t\t\t\t\t\t\t\t<h4>{unit.pedigree}</h4>\n\t\t\t\t\t\t\t\t\t\t<h4>{unit.name}</h4>\n\t\t\t\t\t\t\t\t\t</FaangName>\n\t\t\t\t\t\t\t\t</FaangHeader>\n\t\t\t\t\t\t\t\t<HealthBarContainer unit={unit}>\n\t\t\t\t\t\t\t\t\t<HealthBar\n\t\t\t\t\t\t\t\t\t\tunit={unit}\n\t\t\t\t\t\t\t\t\t\tpercent={Math.ceil(\n\t\t\t\t\t\t\t\t\t\t\t(unit.currentHealth /\n\t\t\t\t\t\t\t\t\t\t\t\tunit.maxHealth) *\n\t\t\t\t\t\t\t\t\t\t\t\t100\n\t\t\t\t\t\t\t\t\t\t)}>\n\t\t\t\t\t\t\t\t\t\t{Math.ceil(\n\t\t\t\t\t\t\t\t\t\t\t(unit.currentHealth /\n\t\t\t\t\t\t\t\t\t\t\t\tunit.maxHealth) *\n\t\t\t\t\t\t\t\t\t\t\t\t100\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t%\n\t\t\t\t\t\t\t\t\t</HealthBar>\n\t\t\t\t\t\t\t\t</HealthBarContainer>\n\t\t\t\t\t\t\t</FaangContent>\n\t\t\t\t\t\t\t<EnemyRank>\n\t\t\t\t\t\t\t\t<h5>{unit.rank}</h5>\n\t\t\t\t\t\t\t\t<h5>{unit.species}</h5>\n\t\t\t\t\t\t\t</EnemyRank>\n\t\t\t\t\t\t</FaangContainer>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</EnemyFlexContainer>\n\t\t</EnemyFieldWrapper>\n\t);\n}\n\nexport default EnemyField;\n","/Users/esquire/code/projects/enter-the-faang/league/src/components/PlayerField/PlayerField.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/KingdomField/KingdomField.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/KingdomField/SCKingdomField.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/PlayerField/SCPlayerField.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/EnemyField/SCEnemyField.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/Data/SessionLogic.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/GameContext.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/Data/Cards.js",["119","120","121","122","123","124","125"],"import { calculations, session } from '../Data/SessionLogic'\n\nclass Card {\n    constructor(name, strength, energy) {\n        this.name = name;\n        this.strength = strength;\n        this.energy = energy;\n        this.isUsed = false;\n    }\n}\n// HEX COLORS\n// ATTACK = #FFA936, #806441\n// DEFENSE = #51A3A3, #387070\n// SUPPORT = #DD7373, #A35555\nclass AttackCard extends Card {\n\tconstructor(name, strength, energy) {\n        super(name, strength, energy);\n        // SPECIFIC TO THIS CLASS\n        this.type = 'Attack'\n        this.colors = {\n\t\t\tprimary: '#FFA936',\n\t\t\tsecondary: '#806441',\n\t\t};\n        this.description = `Deals damage to the enemy with ${this.strength} power.`;\n\t}\n\teffect(initiator, target) {\n        let percent\n        this.speed = initiator.speed\n        // IF INITIATOR HAS ENOUGH ENERGY AND HAS A VALID TARGET\n        if (initiator !== target && initiator.energy >= this.energy && initiator.isAlive) {\n\t\t\t// DO DAMAGE\n\t\t\ttarget.currentHealth -= calculations.playerDamageCalc(\n\t\t\t\tinitiator,\n\t\t\t\ttarget,\n\t\t\t\tthis.strength,\n\t\t\t\tsession\n\t\t\t);\n\t\t\t// USE THIS CARD SO IT IS SPLICED\n\t\t\tthis.isUsed = true;\n\t\t\t// SUBTRACT ENERGY COST\n\t\t\tinitiator.energy -= this.energy;\n\t\t\tif (target.currentHealth <= 0) {\n\t\t\t\ttarget.isAlive = false;\n\t\t\t}\n\t\t\t// CALCULATE PERCENTAGE FOR DISPLAY\n\t\t\tpercent = Math.ceil(\n\t\t\t\t(target.currentHealth / target.maxHealth) * 100\n\t\t\t);\n\t\t\t// IF ZENSCAPE IS FLASH ADD FLASH STATUS TO THEM\n\t\t\tif (\n\t\t\t\tsession.currentZenscape.name === 'Flash' &&\n\t\t\t\tMath.random() * 100 < session.currentZenscape.intensity\n\t\t\t) {\n\t\t\t\ttarget.status.flash = true\n\t\t\t}\n\t\t}\n        // IF INITIATOR IS TARGET CHOOSE NEW TARGET\n            if (initiator === target) {\n                console.log('CHOOSE NEW TARGET');\n            }\n            // IF INITIATOR DOES NOT HAVE ENOUGH ENERGY THIS CAN'T BE USED\n            if (initiator.energy < this.energy) {\n                console.log('THIS TITAN DOES NOT HAVE ENOUGH ENERGY');\n            }\n            // RESET ENERGY (WILL PROBABLY CHANCE)\n            initiator.energy = initiator.showcase.energy\n            // IF TARGET DIED FROM ATTACK\n            if (target.currentHealth <= 0) {\n                target.isAlive = false\n                return {\n\t\t\t\t\tevent: `card ${this.name} was used by ${initiator.name} to attack ${target.name} and it was defeated`,\n\t\t\t\t\tbgColor: initiator.showcase.colors.secondary,\n\t\t\t\t\tcolor: '#000',\n                };\n                // IF TARGET DID NOT DIE FROM THE ATTACK\n            } else return {\n\t\t\t\tevent: `card ${this.name} was used by ${initiator.name} to attack ${target.name} and now it has ${percent}% health remaining`,\n\t\t\t\tbgColor: initiator.showcase.colors.secondary,\n                color: '#000',\n                border: 'red'\n\t\t\t};\n\t}\n}\n\nclass HealCard extends Card {\n\tconstructor(name, strength, energy) {\n\t\tsuper(name, strength, energy);\n        // SPECIFIC TO THIS CLASS\n        this.type = 'Heal'\n\t\tthis.colors = {\n\t\t\tprimary: '#51A3A3',\n\t\t\tsecondary: '#387070',\n\t\t};\n        this.description = `Heals the target with ${this.strength} power.`;\n\t}\n\teffect(initiator, target) {\n        let percent\n        this.speed = initiator.speed;\n        let res = null\n        if (target.isFaang) {\n            console.log('CHOOSE NEW TARGET')\n        }\n\t\tif (initiator !== target && initiator.energy >= this.energy && !target.isFaang) {\n\t\t\tthis.isUsed = true;\n            initiator.energy -= this.energy;\n            // calculations.healCalc(initiator, target, this.strength, session)\n            if (initiator.isAlive && target.isAlive) {\n                if (\n\t\t\t\t\t(target.currentHealth +\n\t\t\t\t\t\tcalculations.healCalc(\n\t\t\t\t\t\t\tinitiator,\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tthis.strength,\n\t\t\t\t\t\t\tsession\n\t\t\t\t\t\t)) >\n\t\t\t\t\ttarget.maxHealth\n\t\t\t\t) {\n\t\t\t\t\ttarget.currentHealth = target.maxHealth;\n\t\t\t\t} else {\n                    target.currentHealth += (calculations.healCalc(\n                        initiator,\n\t\t\t\t\t\ttarget,\n\t\t\t\t\t\tthis.strength,\n\t\t\t\t\t\tsession\n                        ))\n                    }\n                percent = Math.ceil(\n                    (target.currentHealth / target.maxHealth) * 100\n                );\n                res = `${initiator.name} used Card ${this.name} to heal ${target.name}, and now it has ${percent}% health remaining`\n                console.log(initiator)\n            } else res = `${initiator.name} used Card ${this.name} in an attempt to heal ${target.name}, but it was defeated before it could be healed`;\n\t\t}\n\t\tif (initiator === target) {\n\t\t\tconsole.log('CHOOSE NEW TARGET');\n\t\t}\n\t\tif (initiator.energy < this.energy) {\n\t\t\tconsole.log('THIS TITAN DOES NOT HAVE ENOUGH ENERGY');\n\t\t}\n        initiator.energy = initiator.showcase.energy;\n        console.log('INITIATOR:', initiator.showcase)\n            return {\n\t\t\t\tevent: res,\n\t\t\t\tbgColor: initiator.showcase.colors.secondary,\n                color: '#000',\n                border: 'green'\n\t\t\t};\n\t}\n}\n\nclass SupportCard extends Card {\n\tconstructor(name, type, strength, energy) {\n\t\tsuper(name, type, strength, energy);\n        // SPECIFIC TO THIS CLASS\n        this.type = 'Support'\n\t\tthis.colors = {\n\t\t\tprimary: '#DD7373',\n\t\t\tsecondary: '#A35555',\n\t\t};\n\t\tthis.description = `Heals the target with ${this.strength} power.`;\n\t}\n\teffect(initiator, target) {\n\t\tthis.speed = initiator.speed;\n\t\tif (initiator !== target && initiator.energy >= this.energy) {\n\t\t\tthis.isUsed = true\n            console.log('it works')\n\t\t}\n\n\t\tif (initiator === target) {\n\t\t\tconsole.log('CHOOSE NEW TARGET');\n\t\t}\n\t\tif (initiator.energy < this.energy) {\n\t\t\tconsole.log('THIS TITAN DOES NOT HAVE ENOUGH ENERGY');\n\t\t}\n        initiator.energy = initiator.showcase.energy;\n            return {\n                event: '======= FIGURE OUT WHAT THE SUPPORTS DO =======',\n                color: this.colors.secondary,\n            };\n\t}\n}\n\nconst aTest = new AttackCard('a test', 1, 1)\nconst aTest2 = new AttackCard('a test2', 2, 2)\nconst aTest3 = new AttackCard('a test3', 3, 3)\nconst aTest4 = new AttackCard('a test4', 4, 4)\nconst aTest5 = new AttackCard('a test5', 5, 5)\nconst aTest6 = new AttackCard('a test6', 6, 6)\nconst aTest7 = new AttackCard('a test7', 7, 7)\nconst hTest = new HealCard('h test', 1, 1)\nconst hTest2 = new HealCard('h test2', 2, 2)\nconst hTest3 = new HealCard('h test3', 3, 3)\nconst hTest4 = new HealCard('h test4', 4, 4)\nconst hTest5 = new HealCard('h test5', 5, 5)\nconst hTest6 = new HealCard('h test6', 6, 6)\nconst hTest7 = new HealCard('h test7', 7, 7)\nconst sTest = new SupportCard('s test', 1, 1)\nconst sTest2 = new SupportCard('s test2', 2, 2)\nconst sTest3 = new SupportCard('s test3', 3, 3)\nconst sTest4 = new SupportCard('s test4', 4, 4)\nconst sTest5 = new SupportCard('s test5', 5, 5)\nconst sTest6 = new SupportCard('s test6', 6, 6)\nconst sTest7 = new SupportCard('s test7', 7, 7)\n\nexport const fullDeck = [\n    // 1\n\taTest,\n    hTest,\n    // sTest,\n    // 2\n\taTest2,\n    hTest2,\n    // sTest2,\n    // 3\n\taTest3,\n    hTest3,\n    // sTest3,\n    // 4\n\taTest4,\n    hTest4,\n    // sTest4,\n    // 5\n\taTest5,\n    hTest5,\n    // sTest5,\n    // 6\n\taTest6,\n    hTest6,\n    // sTest6,\n    //7\n\taTest7,\n    hTest7,\n    // sTest7\n];\n\nexport const allCards = session.shuffle(fullDeck)","/Users/esquire/code/projects/enter-the-faang/league/src/Pages/GameBoard/SCGameBoard.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/GameRules/GameRules.js",["126"],"import React, { useEffect, useRef } from 'react';\nimport {\n\tCloseButton,\n\tGameRulesWrapper,\n\tLoseDiv,\n\tRulesDiv,\n\tRulesFlexContainer,\n\tRulesH3,\n\tRulesHeading,\n\tRulesLI,\n\tRulesOL,\n\tRulesP,\n\tWinDiv\n} from './SCGameRules';\nfunction GameRules ({ showRules, setShowRules }) {\n\tconst panel = useRef();\n\n\tconst handleClick = (e) => {\n\t\tif (!panel.current.contains(e.target)) {\n\t\t\tsetShowRules(!showRules);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tdocument.addEventListener('mousedown', handleClick);\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener('mousedown', handleClick);\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<GameRulesWrapper ref={panel}>\n\t\t\t<CloseButton onClick={() => setShowRules(false)}>&times;</CloseButton>\n\t\t\t<RulesHeading>Rules</RulesHeading>\n\t\t\t<RulesFlexContainer>\n\t\t\t\t<WinDiv>\n\t\t\t\t\t<RulesH3>Win</RulesH3>\n\t\t\t\t\t<RulesP>Defeat all the Faangs</RulesP>\n\t\t\t\t</WinDiv>\n\t\t\t\t<LoseDiv>\n\t\t\t\t\t<RulesH3>Lose</RulesH3>\n\t\t\t\t\t<RulesP>Lose all of your titans</RulesP>\n\t\t\t\t\t<RulesP>Lose all of your kingdoms</RulesP>\n\t\t\t\t</LoseDiv>\n\t\t\t</RulesFlexContainer>\n\n\t\t\t<RulesDiv>\n\t\t\t\t<RulesH3>Turns</RulesH3>\n\t\t\t\t<RulesOL>\n\t\t\t\t\t<RulesLI>\n\t\t\t\t\t\tNew random cards are added to the players' hand from the\n\t\t\t\t\t\tdeck\n\t\t\t\t\t</RulesLI>\n\t\t\t\t\t<RulesLI>\n\t\t\t\t\t\tSwap titans between active ones and reserves (optional)\n\t\t\t\t\t</RulesLI>\n\t\t\t\t\t<RulesLI>\n\t\t\t\t\t\tSelect the card, the titan to use it, and the target\n\t\t\t\t\t</RulesLI>\n\t\t\t\t\t<RulesLI>\n\t\t\t\t\t\tAfter <button>End Turn</button> button is clicked all of\n\t\t\t\t\t\tthe units take their turns according to their speed\n\t\t\t\t\t</RulesLI>\n\t\t\t\t\t<RulesLI>\n\t\t\t\t\t\tIf units are defeated, they are replaced after the\n\t\t\t\t\t\tdamage step\n\t\t\t\t\t</RulesLI>\n\t\t\t\t</RulesOL>\n\t\t\t</RulesDiv>\n\t\t</GameRulesWrapper>\n\t);\n};\n\nexport default GameRules;\n","/Users/esquire/code/projects/enter-the-faang/league/src/components/GameRules/SCGameRules.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/Pages/WelcomeScreen/SCWelcomeScreen.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/SessionInfo/SessionInfo.js",[],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"127","replacedBy":"131"},{"ruleId":"129","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":62,"column":5,"nodeType":"135","endLine":62,"endColumn":7,"suggestions":"136"},{"ruleId":"133","severity":1,"message":"137","line":324,"column":7,"nodeType":"135","endLine":324,"endColumn":9,"suggestions":"138"},{"ruleId":"133","severity":1,"message":"139","line":391,"column":5,"nodeType":"135","endLine":391,"endColumn":7,"suggestions":"140"},{"ruleId":"133","severity":1,"message":"141","line":110,"column":5,"nodeType":"135","endLine":110,"endColumn":7,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":9,"column":2,"nodeType":"145","messageId":"146","endLine":9,"endColumn":16},{"ruleId":"143","severity":1,"message":"147","line":13,"column":2,"nodeType":"145","messageId":"146","endLine":13,"endColumn":16},{"ruleId":"133","severity":1,"message":"148","line":396,"column":5,"nodeType":"135","endLine":396,"endColumn":72,"suggestions":"149"},{"ruleId":"143","severity":1,"message":"150","line":17,"column":9,"nodeType":"145","messageId":"146","endLine":17,"endColumn":18},{"ruleId":"143","severity":1,"message":"151","line":17,"column":20,"nodeType":"145","messageId":"146","endLine":17,"endColumn":32},{"ruleId":"143","severity":1,"message":"152","line":197,"column":7,"nodeType":"145","messageId":"146","endLine":197,"endColumn":12},{"ruleId":"143","severity":1,"message":"153","line":198,"column":7,"nodeType":"145","messageId":"146","endLine":198,"endColumn":13},{"ruleId":"143","severity":1,"message":"154","line":199,"column":7,"nodeType":"145","messageId":"146","endLine":199,"endColumn":13},{"ruleId":"143","severity":1,"message":"155","line":200,"column":7,"nodeType":"145","messageId":"146","endLine":200,"endColumn":13},{"ruleId":"143","severity":1,"message":"156","line":201,"column":7,"nodeType":"145","messageId":"146","endLine":201,"endColumn":13},{"ruleId":"143","severity":1,"message":"157","line":202,"column":7,"nodeType":"145","messageId":"146","endLine":202,"endColumn":13},{"ruleId":"143","severity":1,"message":"158","line":203,"column":7,"nodeType":"145","messageId":"146","endLine":203,"endColumn":13},{"ruleId":"133","severity":1,"message":"159","line":30,"column":5,"nodeType":"135","endLine":30,"endColumn":7,"suggestions":"160"},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],["161"],["162"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'staticTitans'. Either include it or remove the dependency array. You can also do a functional update 'setStaticTitans(s => ...)' if you only need 'staticTitans' in the 'setStaticTitans' call.","ArrayExpression",["163"],"React Hook useEffect has missing dependencies: 'airTitan', 'fireTitan', 'lightningTitan', 'metalTitan', 'setPlayerTeam', 'stoneTitan', 'terraTitan', and 'waterTitan'. Either include them or remove the dependency array. If 'setPlayerTeam' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["164"],"React Hook useEffect has missing dependencies: 'setEnemyUnits' and 'unitPool'. Either include them or remove the dependency array. If 'setEnemyUnits' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["165"],"React Hook useEffect has missing dependencies: 'airKingdom', 'fireKingdom', 'lightningKingdom', 'metalKingdom', 'setPlayerKingdoms', 'stoneKingdom', 'terraKingdom', and 'waterKingdom'. Either include them or remove the dependency array. If 'setPlayerKingdoms' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["166"],"no-unused-vars","'BoardContainer' is defined but never used.","Identifier","unusedVar","'GameRulesModal' is defined but never used.","React Hook useEffect has missing dependencies: 'listUnits' and 'setAllUnitsOnField'. Either include them or remove the dependency array. If 'setAllUnitsOnField' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["167"],"'enemyInfo' is assigned a value but never used.","'setEnemyInfo' is assigned a value but never used.","'sTest' is assigned a value but never used.","'sTest2' is assigned a value but never used.","'sTest3' is assigned a value but never used.","'sTest4' is assigned a value but never used.","'sTest5' is assigned a value but never used.","'sTest6' is assigned a value but never used.","'sTest7' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleClick'. Either include it or remove the dependency array.",["168"],"no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},"Update the dependencies array to be: [staticTitans]",{"range":"181","text":"182"},"Update the dependencies array to be: [airTitan, fireTitan, lightningTitan, metalTitan, setPlayerTeam, stoneTitan, terraTitan, waterTitan]",{"range":"183","text":"184"},"Update the dependencies array to be: [setEnemyUnits, unitPool]",{"range":"185","text":"186"},"Update the dependencies array to be: [airKingdom, fireKingdom, lightningKingdom, metalKingdom, setPlayerKingdoms, stoneKingdom, terraKingdom, waterKingdom]",{"range":"187","text":"188"},"Update the dependencies array to be: [enemyUnits, playerTeam, playerKingdoms, session, session.eventLog, setAllUnitsOnField, listUnits]",{"range":"189","text":"190"},"Update the dependencies array to be: [handleClick]",{"range":"191","text":"192"},[1289,1291],"[staticTitans]",[8967,8969],"[airTitan, fireTitan, lightningTitan, metalTitan, setPlayerTeam, stoneTitan, terraTitan, waterTitan]",[9517,9519],"[setEnemyUnits, unitPool]",[2811,2813],"[airKingdom, fireKingdom, lightningKingdom, metalKingdom, setPlayerKingdoms, stoneKingdom, terraKingdom, waterKingdom]",[11100,11167],"[enemyUnits, playerTeam, playerKingdoms, session, session.eventLog, setAllUnitsOnField, listUnits]",[568,570],"[handleClick]"]