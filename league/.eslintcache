[{"/Users/esquire/code/projects/enter-the-faang/league/src/index.js":"1","/Users/esquire/code/projects/enter-the-faang/league/src/App.js":"2","/Users/esquire/code/projects/enter-the-faang/league/src/SCApp.js":"3","/Users/esquire/code/projects/enter-the-faang/league/src/Data/Unit.js":"4","/Users/esquire/code/projects/enter-the-faang/league/src/Data/FaangStats.js":"5","/Users/esquire/code/projects/enter-the-faang/league/src/Pages/WelcomeScreen/WelcomeScreen.js":"6","/Users/esquire/code/projects/enter-the-faang/league/src/Data/PlayerUnits.js":"7","/Users/esquire/code/projects/enter-the-faang/league/src/Data/EnemyUnits.js":"8","/Users/esquire/code/projects/enter-the-faang/league/src/Data/PlayerKingdoms.js":"9","/Users/esquire/code/projects/enter-the-faang/league/src/Pages/GameBoard/GameBoard.js":"10","/Users/esquire/code/projects/enter-the-faang/league/src/components/EnemyField/EnemyField.js":"11","/Users/esquire/code/projects/enter-the-faang/league/src/components/PlayerField/PlayerField.js":"12","/Users/esquire/code/projects/enter-the-faang/league/src/components/KingdomField/KingdomField.js":"13","/Users/esquire/code/projects/enter-the-faang/league/src/components/KingdomField/SCKingdomField.js":"14","/Users/esquire/code/projects/enter-the-faang/league/src/components/PlayerField/SCPlayerField.js":"15","/Users/esquire/code/projects/enter-the-faang/league/src/components/EnemyField/SCEnemyField.js":"16","/Users/esquire/code/projects/enter-the-faang/league/src/Data/SessionLogic.js":"17","/Users/esquire/code/projects/enter-the-faang/league/src/components/GameContext.js":"18","/Users/esquire/code/projects/enter-the-faang/league/src/Data/Cards.js":"19","/Users/esquire/code/projects/enter-the-faang/league/src/Pages/GameBoard/SCGameBoard.js":"20"},{"size":236,"mtime":1612132713936,"results":"21","hashOfConfig":"22"},{"size":2491,"mtime":1612576337176,"results":"23","hashOfConfig":"22"},{"size":191,"mtime":1611804813367,"results":"24","hashOfConfig":"22"},{"size":1107,"mtime":1610484726713,"results":"25","hashOfConfig":"22"},{"size":9315,"mtime":1611609709189,"results":"26","hashOfConfig":"22"},{"size":1246,"mtime":1612423173833,"results":"27","hashOfConfig":"22"},{"size":9027,"mtime":1612580129936,"results":"28","hashOfConfig":"22"},{"size":9493,"mtime":1612492280154,"results":"29","hashOfConfig":"22"},{"size":2875,"mtime":1612464331979,"results":"30","hashOfConfig":"22"},{"size":12401,"mtime":1612493027912,"results":"31","hashOfConfig":"22"},{"size":1554,"mtime":1612574743251,"results":"32","hashOfConfig":"22"},{"size":3377,"mtime":1612468053976,"results":"33","hashOfConfig":"22"},{"size":2602,"mtime":1612580149848,"results":"34","hashOfConfig":"22"},{"size":1998,"mtime":1612482435001,"results":"35","hashOfConfig":"22"},{"size":2891,"mtime":1612218001257,"results":"36","hashOfConfig":"22"},{"size":1682,"mtime":1612423855813,"results":"37","hashOfConfig":"22"},{"size":8785,"mtime":1612499600422,"results":"38","hashOfConfig":"22"},{"size":86,"mtime":1610826572545,"results":"39","hashOfConfig":"22"},{"size":7164,"mtime":1612491774644,"results":"40","hashOfConfig":"22"},{"size":2595,"mtime":1612421612973,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"oulkl",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/esquire/code/projects/enter-the-faang/league/src/index.js",[],["89","90"],"/Users/esquire/code/projects/enter-the-faang/league/src/App.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/SCApp.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/Data/Unit.js",[],["91","92"],"/Users/esquire/code/projects/enter-the-faang/league/src/Data/FaangStats.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/Pages/WelcomeScreen/WelcomeScreen.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/Data/PlayerUnits.js",["93"],"/Users/esquire/code/projects/enter-the-faang/league/src/Data/EnemyUnits.js",["94"],"import React, { useEffect } from 'react';\nimport { pedigree, faang, randomNames } from './FaangStats';\nimport { session } from './SessionLogic';\nimport { calculations } from '../Data/SessionLogic'\n\nconst EnemyFaangs = ({ difficulty, armySize, setEnemyUnits }) => {\n\tconst unitPool = [];\n\tclass BasicFaang {\n\t\tconstructor(\n\t\t\tname,\n\t\t\tcurrentHealth,\n\t\t\tmaxHealth,\n\t\t\tattack,\n\t\t\tdefense,\n\t\t\tregeneration,\n\t\t\tspeed,\n\t\t\trank,\n\t\t\tpedigree,\n\t\t\tspecies,\n\t\t\tshowcase\n\t\t) {\n\t\t\t// specs\n\t\t\tthis.isAlive = true;\n\t\t\tthis.rank = rank;\n\t\t\tthis.pedigree = pedigree;\n\t\t\tthis.species = species;\n\t\t\tthis.showcase = showcase;\n\t\t\t// stats\n\t\t\tthis.name = name;\n\t\t\tthis.currentHealth = currentHealth;\n\t\t\tthis.maxHealth = maxHealth;\n\t\t\tthis.attack = attack;\n\t\t\tthis.defense = defense;\n\t\t\tthis.regenerationRate = (100 - regeneration) / 25;\n\t\t\tthis.speed = speed;\n\t\t\tthis.isFaang = true;\n\t\t\tthis.status = {\n\t\t\t\tflash: false\n\t\t\t}\n\t\t}\n\t\tregenerateHealth() {\n\t\t\t// IF CURRENT HEALTH IS LESS THAN MAX HEALTH AND REGENERATION RATE IS POSITIVE\n\t\t\tif (this.currentHealth < this.maxHealth && this.regenerationRate > 0) {\n\t\t\t\t// IF REGENERATION WILL BOOST HEALTH PAST MAX HEALTH\n\t\t\t\tif ((this.currentHealth += (this.currentHealth * ( .01 * this.regenerationRate))) > this.maxHealth) {\n\t\t\t\t\t// MAKE CURRENT HEALTH MAX HEALTH\n\t\t\t\t\tthis.currentHealth = this.maxHealth\n\t\t\t\t\t// ELSE REGENERATE\n\t\t\t\t} else {\n\t\t\t\t\tthis.currentHealth +=\n\t\t\t\t\t\tthis.currentHealth * (0.01 * this.regenerationRate);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tattackUnit(target) {\n\t\t\t// IF THIS IS ALIVE\n\t\t\tif (this.isAlive) {\n\t\t\t\t// IF ZENSCAPE IS SMOKE THE ATTACK MAY MISS\n\t\t\t\tif (session.currentZenscape.name === 'Smoke' && Math.random() * 100 < session.currentZenscape.intensity) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tevent: `${this.name} missed its attack`,\n\t\t\t\t\t\t\tbgColor: this.showcase.rankColor,\n\t\t\t\t\t\t\tcolor: '#fff',\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t// IF ZENSCAPE IS FLASH IT MAY NOT ATTACK\n\t\t\t\tif (session.currentZenscape.name === 'Flash' && Math.random() * 100 < session.currentZenscape.intensity && this.status.flash) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tevent: `${this.name} didn't attack because it was flashed`,\n\t\t\t\t\t\t\tbgColor: this.showcase.rankColor,\n\t\t\t\t\t\t\tcolor: '#fff',\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t// THIS ATTACK\n\t\t\t\ttarget.currentHealth -= calculations.enemyDamageCalc(\n\t\t\t\t\tthis,\n\t\t\t\t\ttarget,\n\t\t\t\t\tsession\n\t\t\t\t);\n\t\t\t\tlet percent = Math.ceil(\n\t\t\t\t\t(target.currentHealth / target.maxHealth) * 100\n\t\t\t\t);\n\t\t\t\t// IF ZENSCAPE IS THORN THIS UNIT ALSO TAKES DAMAGE\n\t\t\t\tif (\n\t\t\t\t\tsession.currentZenscape.name === 'Thorn' &&\n\t\t\t\t\tMath.random() * 100 < session.currentZenscape.intensity\n\t\t\t\t) {\n\t\t\t\t\tthis.currentHealth -= session.currentZenscape.intensity;\n\t\t\t\t}\n\t\t\t\t// IF ATTACK WAS FATAL\n\t\t\t\tif (target.currentHealth <= 0) {\n\t\t\t\t\ttarget.isAlive = false;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tevent: `${this.name} attacked ${target.name} and it was defeated`,\n\t\t\t\t\t\tbgColor: this.showcase.rankColor,\n\t\t\t\t\t\tcolor: '#fff',\n\t\t\t\t\t};\n\t\t\t\t\t// IF ATTACK WENT THROUGH BUT WAS NOT FATAL\n\t\t\t\t} else\n\t\t\t\t\treturn {\n\t\t\t\t\t\tevent: `${this.name} attacked ${target.name} and now it has ${percent}% health remaining`,\n\t\t\t\t\t\tbgColor: this.showcase.rankColor,\n\t\t\t\t\t\tcolor: '#fff',\n\t\t\t\t\t};\n\t\t\t\t// IF THIS IS NOT ALIVE\n\t\t\t} else return {\n\t\t\t\tevent: `${this.name} couldn't attack becuase it was defeated by a faster unit`,\n\t\t\t\tbgColor: this.showcase.rankColor,\n\t\t\t\tcolor: '#fff',\n\t\t\t};\n\t\t}\n\t}\n\n\tclass AdvancedFaang extends BasicFaang {\n\t\tconstructor(\n\t\t\tname,\n\t\t\tcurrentHealth,\n\t\t\tmaxHealth,\n\t\t\tattack,\n\t\t\tdefense,\n\t\t\tregeneration,\n\t\t\tspeed,\n\t\t\trank,\n\t\t\tpedigree,\n\t\t\tspecies,\n\t\t\tshowcase,\n\t\t\tregenerationRate\n\t\t) {\n\t\t\tsuper(\n\t\t\t\tname,\n\t\t\t\tcurrentHealth,\n\t\t\t\tmaxHealth,\n\t\t\t\tattack,\n\t\t\t\tdefense,\n\t\t\t\tregeneration,\n\t\t\t\tspeed,\n\t\t\t\trank,\n\t\t\t\tpedigree,\n\t\t\t\tspecies,\n\t\t\t\tshowcase,\n\t\t\t\tregenerationRate\n\t\t\t);\n\t\t\tthis.isAdmin = true;\n\t\t\tthis.class = 'Advanced';\n\t\t}\n\t}\n\n\tclass EliteFaang extends AdvancedFaang {\n\t\tconstructor(\n\t\t\tname,\n\t\t\tcurrentHealth,\n\t\t\tmaxHealth,\n\t\t\tattack,\n\t\t\tdefense,\n\t\t\tregeneration,\n\t\t\tspeed,\n\t\t\trank,\n\t\t\tpedigree,\n\t\t\tspecies,\n\t\t\tshowcase,\n\t\t\tregenerationRate\n\t\t) {\n\t\t\tsuper(\n\t\t\t\tname,\n\t\t\t\tcurrentHealth,\n\t\t\t\tmaxHealth,\n\t\t\t\tattack,\n\t\t\t\tdefense,\n\t\t\t\tregeneration,\n\t\t\t\tspeed,\n\t\t\t\trank,\n\t\t\t\tpedigree,\n\t\t\t\tspecies,\n\t\t\t\tshowcase,\n\t\t\t\tregenerationRate\n\t\t\t);\n\t\t\tthis.class = 'Elite';\n\t\t}\n\t}\n\n\t// FAANG GENERATOR\n\tlet basicUnits = faang.basic;\n\tlet advancedUnits = faang.advanced;\n\tlet eliteUnits = faang.elite;\n\n\t// RANDOM UNIT GENERATOR THAT PUSHES THE UNITS INTO THE UNIT POOL\n\tfunction generateRandomUnit(rank) {\n\t\tlet length = Object.keys(rank).length;\n\t\tlet randomNumber = Math.floor(Math.random() * length);\n\t\tlet randomUnit = rank[Object.keys(rank)[randomNumber]];\n\t\tlet percentChance = Math.floor(Math.random() * 100);\n\t\trandomUnit.name =\n\t\t\trandomNames[Math.floor(Math.random() * randomNames.length)];\n\t\tif (rank.dra.rank === 'Basic') {\n\t\t\tif (percentChance <= 95) {\n\t\t\t\trandomUnit.pedigree =\n\t\t\t\t\tpedigree.commonLevelOne[\n\t\t\t\t\t\tMath.floor(\n\t\t\t\t\t\t\tMath.random() * pedigree.commonLevelOne.length\n\t\t\t\t\t\t)\n\t\t\t\t\t];\n\t\t\t} else {\n\t\t\t\trandomUnit.pedigree =\n\t\t\t\t\tpedigree.specialLevelOne[\n\t\t\t\t\t\tMath.floor(\n\t\t\t\t\t\t\tMath.random() * pedigree.specialLevelOne.length\n\t\t\t\t\t\t)\n\t\t\t\t\t];\n\t\t\t}\n\t\t\tunitPool.push(\n\t\t\t\tnew BasicFaang(\n\t\t\t\t\trandomUnit.name,\n\t\t\t\t\trandomUnit.health,\n\t\t\t\t\trandomUnit.health,\n\t\t\t\t\trandomUnit.attack,\n\t\t\t\t\trandomUnit.defense,\n\t\t\t\t\trandomUnit.regeneration,\n\t\t\t\t\trandomUnit.speed,\n\t\t\t\t\trandomUnit.rank,\n\t\t\t\t\trandomUnit.pedigree,\n\t\t\t\t\trandomUnit.species,\n\t\t\t\t\tcreateShowcase(randomUnit)\n\t\t\t\t)\n\t\t\t);\n\t\t} else if (rank.dra.rank === 'Advanced') {\n\t\t\tif (percentChance <= 95) {\n\t\t\t\trandomUnit.pedigree =\n\t\t\t\t\tpedigree.commonLevelTwo[\n\t\t\t\t\t\tMath.floor(\n\t\t\t\t\t\t\tMath.random() * pedigree.commonLevelTwo.length\n\t\t\t\t\t\t)\n\t\t\t\t\t];\n\t\t\t} else {\n\t\t\t\trandomUnit.pedigree =\n\t\t\t\t\tpedigree.specialLevelTwo[\n\t\t\t\t\t\tMath.floor(\n\t\t\t\t\t\t\tMath.random() * pedigree.specialLevelTwo.length\n\t\t\t\t\t\t)\n\t\t\t\t\t];\n\t\t\t}\n\t\t\tunitPool.push(\n\t\t\t\tnew AdvancedFaang(\n\t\t\t\t\trandomUnit.name,\n\t\t\t\t\trandomUnit.health,\n\t\t\t\t\trandomUnit.health,\n\t\t\t\t\trandomUnit.attack,\n\t\t\t\t\trandomUnit.defense,\n\t\t\t\t\trandomUnit.regeneration,\n\t\t\t\t\trandomUnit.speed,\n\t\t\t\t\trandomUnit.rank,\n\t\t\t\t\trandomUnit.pedigree,\n\t\t\t\t\trandomUnit.species,\n\t\t\t\t\tcreateShowcase(randomUnit)\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\tif (percentChance <= 95) {\n\t\t\t\trandomUnit.pedigree =\n\t\t\t\t\tpedigree.commonLevelThree[\n\t\t\t\t\t\tMath.floor(\n\t\t\t\t\t\t\tMath.random() * pedigree.commonLevelThree.length\n\t\t\t\t\t\t)\n\t\t\t\t\t];\n\t\t\t} else {\n\t\t\t\trandomUnit.pedigree =\n\t\t\t\t\tpedigree.specialLevelThree[\n\t\t\t\t\t\tMath.floor(\n\t\t\t\t\t\t\tMath.random() * pedigree.specialLevelThree.length\n\t\t\t\t\t\t)\n\t\t\t\t\t];\n\t\t\t}\n\t\t\tunitPool.push(\n\t\t\t\tnew EliteFaang(\n\t\t\t\t\trandomUnit.name,\n\t\t\t\t\trandomUnit.health,\n\t\t\t\t\trandomUnit.health,\n\t\t\t\t\trandomUnit.attack,\n\t\t\t\t\trandomUnit.defense,\n\t\t\t\t\trandomUnit.regeneration,\n\t\t\t\t\trandomUnit.speed,\n\t\t\t\t\trandomUnit.rank,\n\t\t\t\t\trandomUnit.pedigree,\n\t\t\t\t\trandomUnit.species,\n\t\t\t\t\tcreateShowcase(randomUnit)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\t// SHOWCASE CREATOR\n\tfunction createShowcase(unit) {\n\t\tlet showcase = {\n\t\t\tdescription: null,\n\t\t\trankColor: null,\n\t\t\tpedigreeColor: null,\n\t\t\tspeciesColor: null,\n\t\t};\n\n\t\t// SET COLOR FOR RANKING\n\t\tswitch (unit.rank) {\n\t\t\tcase 'Basic':\n\t\t\t\tshowcase.rankColor = '#9867FF';\n\t\t\t\tbreak;\n\t\t\tcase 'Advanced':\n\t\t\t\tshowcase.rankColor = '#5C25BA';\n\t\t\t\tbreak;\n\t\t\tcase 'Elite':\n\t\t\t\tshowcase.rankColor = '#24183D';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\t// SET COLOR FOR SPECIES\n\t\tswitch (unit.species) {\n\t\t\tcase 'Dra':\n\t\t\t\tshowcase.speciesColor = '#5966FF';\n\t\t\t\tbreak;\n\t\t\tcase 'Tyr':\n\t\t\t\tshowcase.speciesColor = '#FF7373';\n\t\t\t\tbreak;\n\t\t\tcase 'Sal':\n\t\t\t\tshowcase.speciesColor = '#FFD640';\n\t\t\t\tbreak;\n\t\t\tcase 'Met':\n\t\t\t\tshowcase.speciesColor = '#4DFF80';\n\t\t\t\tbreak;\n\t\t\tcase 'Gar':\n\t\t\t\tshowcase.speciesColor = '#4BDDFF';\n\t\t\t\tbreak;\n\t\t\tcase 'Hyd':\n\t\t\t\tshowcase.speciesColor = '#FF9230';\n\t\t\t\tbreak;\n\t\t\tcase 'Goo':\n\t\t\t\tshowcase.speciesColor = '#DE63FF';\n\t\t\t\tbreak;\n\t\t\tcase 'Kom':\n\t\t\t\tshowcase.speciesColor = '#B5FF3D';\n\t\t\t\tbreak;\n\t\t\tcase 'Pul':\n\t\t\t\tshowcase.speciesColor = '#314511';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// SET COLOR FOR PEDIGREE\n\t\tif (pedigree.commonLevelOne.includes(unit.pedigree)) {\n\t\t\tshowcase.pedigreeColor = '#9C5221';\n\t\t} else if (pedigree.specialLevelOne.includes(unit.pedigree)) {\n\t\t\tshowcase.pedigreeColor = '#9C5221';\n\t\t} else if (pedigree.commonLevelTwo.includes(unit.pedigree)) {\n\t\t\tshowcase.pedigreeColor = '#AAA9AD';\n\t\t} else if (pedigree.specialLevelTwo.includes(unit.pedigree)) {\n\t\t\tshowcase.pedigreeColor = '#AAA9AD';\n\t\t} else if (pedigree.commonLevelThree.includes(unit.pedigree)) {\n\t\t\tshowcase.pedigreeColor = '#F5D327';\n\t\t} else if (pedigree.specialLevelThree.includes(unit.pedigree)) {\n\t\t\tshowcase.pedigreeColor = '#F0CE26';\n\t\t}\n\t\treturn showcase;\n\t}\n\n\t// PLAYER GAME SETTINGS\n\n\tfor (let i = 0; i < armySize; i++) {\n\t\t// SELECT PERCENTAGE OF UNITS WILL HAVE WHICH CLASSES\n\t\tlet difficultyArray = [];\n\t\tif (difficulty === 'easy') {\n\t\t\tdifficultyArray = [70, 95];\n\t\t} else if (difficulty === 'normal') {\n\t\t\tdifficultyArray = [60, 90];\n\t\t} else if (difficulty === 'veteran') {\n\t\t\tdifficultyArray = [40, 70];\n\t\t} else if (difficulty === 'insane') {\n\t\t\tdifficultyArray = [20, 50];\n\t\t}\n\n\t\t// SELECT HOW MANY UNITS WILL BE CREATED\n\t\tlet percentChance = Math.floor(Math.random() * 100);\n\t\tif (percentChance < difficultyArray[0]) {\n\t\t\tgenerateRandomUnit(basicUnits);\n\t\t} else if (percentChance < difficultyArray[1]) {\n\t\t\tgenerateRandomUnit(advancedUnits);\n\t\t} else {\n\t\t\tgenerateRandomUnit(eliteUnits);\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tsetEnemyUnits(unitPool);\n\t}, []);\n\n\treturn <div></div>;\n};\n\nexport default EnemyFaangs;\n","/Users/esquire/code/projects/enter-the-faang/league/src/Data/PlayerKingdoms.js",["95"],"import React, { useEffect } from 'react';\n\nconst PlayerKingdoms = ({ setPlayerKingdoms, playerTeam }) => {\n\n\tclass Kingdom {\n\t\tconstructor(\n\t\t\tname,\n\t\t\tmaxHealth,\n\t\t\tcurrentHealth,\n\t\t\tdefense,\n\t\t\tregenerationRate,\n\t\t\tshowcase\n\t\t) {\n\t\t\t// specs\n\t\t\tthis.isAlive = true;\n\t\t\tthis.isKingdom = true;\n\t\t\t// stats\n\t\t\tthis.name = name;\n\t\t\tthis.maxHealth = maxHealth;\n\t\t\tthis.currentHealth = currentHealth;\n\t\t\tthis.defense = defense;\n\t\t\tthis.regenerationRate = regenerationRate;\n\t\t\tthis.showcase = showcase;\n\t\t\tthis.speed = 0;\n\t\t}\n\t\tregenerateHealth() {\n\t\t\tif (\n\t\t\t\tthis.currentHealth < this.maxHealth &&\n\t\t\t\tthis.regenerationRate > 0\n\t\t\t) {\n\t\t\t\tthis.currentHealth +=\n\t\t\t\t\tthis.currentHealth * (0.01 * this.regenerationRate);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst fireKingdom = new Kingdom(\n\t\t'Fire Kingdom',\n\t\tMath.floor({ ...playerTeam[0] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[0] }.currentHealth) * 3,\n\t\t{ ...playerTeam[0] }.defense,\n\t\t{ ...playerTeam[0] }.regenerationRate,\n\t\t{ ...playerTeam[0] }.showcase,\n\t);\n\n\tconst waterKingdom = new Kingdom(\n\t\t'Water Kingdom',\n\t\tMath.floor({ ...playerTeam[1] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[1] }.currentHealth) * 3,\n\t\t{ ...playerTeam[1] }.defense,\n\t\t{ ...playerTeam[1] }.regenerationRate,\n\t\t{ ...playerTeam[1] }.showcase,\n\t);\n\n\tconst stoneKingdom = new Kingdom(\n\t\t'Stone Kingdom',\n\t\tMath.floor({ ...playerTeam[2] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[2] }.currentHealth) * 3,\n\t\t{ ...playerTeam[2] }.defense,\n\t\t{ ...playerTeam[2] }.regenerationRate,\n\t\t{ ...playerTeam[2] }.showcase,\n\t);\n\n\tconst airKingdom = new Kingdom(\n\t\t'Air Kingdom',\n\t\tMath.floor({ ...playerTeam[3] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[3] }.currentHealth) * 3,\n\t\t{ ...playerTeam[3] }.defense,\n\t\t{ ...playerTeam[3] }.regenerationRate,\n\t\t{ ...playerTeam[3] }.showcase,\n\t);\n\n\tconst lightningKingdom = new Kingdom(\n\t\t'Lightning Kingdom',\n\t\tMath.floor({ ...playerTeam[4] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[4] }.currentHealth) * 3,\n\t\t{ ...playerTeam[4] }.defense,\n\t\t{ ...playerTeam[4] }.regenerationRate,\n\t\t{ ...playerTeam[4] }.showcase,\n\t);\n\n\tconst terraKingdom = new Kingdom(\n\t\t'Terra Kingdom',\n\t\tMath.floor({ ...playerTeam[5] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[5] }.currentHealth) * 3,\n\t\t{ ...playerTeam[5] }.defense,\n\t\t{ ...playerTeam[5] }.regenerationRate,\n\t\t{ ...playerTeam[5] }.showcase,\n\t);\n\n\tconst metalKingdom = new Kingdom(\n\t\t'Metal Kingdom',\n\t\tMath.floor({ ...playerTeam[6] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[6] }.currentHealth) * 3,\n\t\t{ ...playerTeam[6] }.defense,\n\t\t{ ...playerTeam[6] }.regenerationRate,\n\t\t{ ...playerTeam[6] }.showcase,\n\t);\n\n\tuseEffect(() => {\n\t\tsetPlayerKingdoms([\n\t\t\tfireKingdom,\n\t\t\twaterKingdom,\n\t\t\tstoneKingdom,\n\t\t\tairKingdom,\n\t\t\tlightningKingdom,\n\t\t\tterraKingdom,\n\t\t\tmetalKingdom,\n\t\t]);\n\t}, []);\n\n\treturn <div></div>;\n};\n\nexport default PlayerKingdoms;\n","/Users/esquire/code/projects/enter-the-faang/league/src/Pages/GameBoard/GameBoard.js",["96","97"],"import React, { useState, useContext, useEffect, useCallback } from 'react';\nimport EnemyField from '../../components/EnemyField/EnemyField';\nimport KingdomField from '../../components/KingdomField/KingdomField';\nimport PlayerField from '../../components/PlayerField/PlayerField';\nimport { GameContext } from '../../components/GameContext';\nimport { allCards } from '../../Data/Cards';\nimport {\n\tActionContainer,\n\tBoardContainer,\n\tEnemyFieldContainer,\n\tGameBoardWrapper,\n\tGameInfoContainer,\n\tGameRulesModal,\n\tKingdomFieldContainer,\n\tPlayerFieldContainer,\n\tSessionLogContainer,\n} from './SCGameBoard';\n\nconst GameBoard = ({\n\tenemyUnits,\n\tplayerTeam,\n\tsetPlayerTeam,\n\tplayerKingdoms,\n\tsession,\n\tallUnitsOnField,\n\tsetAllUnitsOnField,\n}) => {\n\tconst [showRules, setShowRules] = useState(false);\n\n\tconst { involved, setInvolved } = useContext(GameContext);\n\tconsole.log('PLAYER KINGDOMS', playerKingdoms);\n\t// console.log('PLAYER TEAM', playerTeam);\n\t// console.log('ENEMY UNITS', enemyUnits);\n\n\tconst functions = {\n\t\t// 1 setInvolved initiator to specific object (choose)\n\t\t// 2 setInvolved possibleTargets\n\t\t// 3 setInvolved selectedTarget (select)\n\t\t// reset setInvolved\n\n\t\t// CARD, SELECT, CHOOSE, ACTION\n\n\t\t// select this action with the click\n\t\tuseCard: function useCard(a) {\n\t\t\tsession.phase = 'Card Selection';\n\t\t\t// 1 SELECT\n\t\t\tconsole.log(a, 'was card used 1');\n\t\t\t// set initiator to where the button was clicked\n\t\t\t// set action to what was clicked\n\t\t\tsetInvolved({ ...involved, card: a, action: a.type });\n\t\t},\n\n\t\t// initiate this action once select is opened\n\t\tinitiate: function initiate(b) {\n\t\t\t// 2 initiate\n\t\t\t// do stuff only if button was clicked\n\t\t\tif (involved.action && !involved.initiator) {\n\t\t\t\t// set selected target to the next click\n\t\t\t\tsetInvolved({ ...involved, initiator: b });\n\t\t\t\t// depending on the action do something\n\t\t\t}\n\t\t\tconsole.log(b, 'was object that initiated 2');\n\t\t},\n\t\tchoose: function choose(c) {\n\t\t\t// 3 ACTION for cards\n\t\t\t// setInvolved({ ...involved, selectedTarget: c})\n\t\t\t// perform this action using the selected target\n\t\t\tif (involved.initiator && involved.card) {\n\t\t\t\tinvolved.initiator.method = function useCard() {\n\t\t\t\t\treturn involved.card.effect(involved.initiator, c);\n\t\t\t\t};\n\t\t\t\t// console.log(involved.initiator)\n\t\t\t\t// set action to falsey so only this click is registered\n\t\t\t\tsetInvolved(false);\n\t\t\t}\n\t\t},\n\n\t\t// actions to take\n\t\t// attacker is where the first button was clicked (involved.initiator)\n\t\t// target is the second click (involved.selectedTarget)\n\t\tattack: function attack(attacker, target) {\n\t\t\t// 3 ACTION for enemies\n\t\t\tsetInvolved({\n\t\t\t\t...involved,\n\t\t\t\tpossibleTargets: [\n\t\t\t\t\tplayerTeam[0],\n\t\t\t\t\tplayerTeam[1],\n\t\t\t\t\tplayerKingdoms[0],\n\t\t\t\t\tplayerKingdoms[1],\n\t\t\t\t\tplayerKingdoms[2],\n\t\t\t\t\tplayerKingdoms[3],\n\t\t\t\t\tplayerKingdoms[4],\n\t\t\t\t\tplayerKingdoms[5],\n\t\t\t\t\tplayerKingdoms[6],\n\t\t\t\t],\n\t\t\t});\n\t\t\tif (attacker !== target) {\n\t\t\t\tif (attacker.isFaang === true) {\n\t\t\t\t\t// do something else\n\t\t\t\t} else {\n\t\t\t\t\tattacker.attackUnit(target);\n\t\t\t\t\tconsole.log('it works');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t}\n\t\t},\n\n\t\tcheck: function check(array) {\n\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\tif (array[i].isAlive === false || array[i].isUsed) {\n\t\t\t\t\tarray.splice(i, 1);\n\t\t\t\t\t// console.log(`${array[i].name} was spliced at:`, i);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn array;\n\t\t},\n\t\tstandBy: function standBy() {\n\t\t\tsession.enhanceZen(playerTeam[0], playerTeam[1]);\n\t\t\tswitch (session.currentZenscape.name) {\n\t\t\t\tcase 'Enhance':\n\t\t\t\t\tif (playerTeam[0]) {\n\t\t\t\t\t\tplayerTeam[0].attack +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[0].defense +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[0].currentHealth +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[0].maxHealth +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[0].speed +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[0].zen += session.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[0].regenerationRate +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (playerTeam[1]) {\n\t\t\t\t\t\tplayerTeam[1].attack +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[1].defense +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[1].currentHealth +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[1].maxHealth +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[1].speed +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[1].zen += session.currentZenscape.intensity;\n\t\t\t\t\t\tplayerTeam[1].regenerationRate +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t// case 'Spore':\n\t\t\t\t// \t// code block\n\t\t\t\t// \tbreak;\n\t\t\t\tcase 'Swamp':\n\t\t\t\t\tif (enemyUnits[0]) {\n\t\t\t\t\t\tenemyUnits[0].speed -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[1]) {\n\t\t\t\t\t\tenemyUnits[1].speed -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[2]) {\n\t\t\t\t\t\tenemyUnits[2].speed -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[3]) {\n\t\t\t\t\t\tenemyUnits[3].speed -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[4]) {\n\t\t\t\t\t\tenemyUnits[4].speed -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Ice':\n\t\t\t\t\tif (enemyUnits[0]) {\n\t\t\t\t\t\tenemyUnits[0].attack -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[1]) {\n\t\t\t\t\t\tenemyUnits[1].attack -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[2]) {\n\t\t\t\t\t\tenemyUnits[2].attack -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[3]) {\n\t\t\t\t\t\tenemyUnits[3].attack -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[4]) {\n\t\t\t\t\t\tenemyUnits[4].attack -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log('no standby effect');\n\t\t\t}\n\t\t},\n\n\t\tbattle: function battle() {\n\t\t\tsetAllUnitsOnField(listUnits());\n\t\t\tallUnitsOnField\n\t\t\t\t.sort((a, b) => (a.speed < b.speed ? 1 : -1))\n\t\t\t\t.forEach((u) => {\n\t\t\t\t\t// MAKE SURE TIME IS NOT WASTED ON KINGDOMS AS THEY DON'T USE CARDS\n\t\t\t\t\tif (!u.isKingdom) {\n\t\t\t\t\t\t// EACH TITAN ATTACKS FROM THE QUEUE\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tif (u.method) {\n\t\t\t\t\t\t\t\tsession.eventLog.unshift(u.method());\n\t\t\t\t\t\t\t\t// CLEAR METHOD SO THERE ARE NO DUPLICATES\n\t\t\t\t\t\t\t\tu.method = null;\n\t\t\t\t\t\t\t\t// IF ZENSCAPE IS STORM, TITAN ATTACKS HAVE SPLASH DAMAGE\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tsession.currentZenscape.name ===\n\t\t\t\t\t\t\t\t\t\t'Storm' &&\n\t\t\t\t\t\t\t\t\tMath.random() * 100 <\n\t\t\t\t\t\t\t\t\t\tsession.currentZenscape.intensity\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tallUnitsOnField.forEach((u) => {\n\t\t\t\t\t\t\t\t\t\tif (u.isFaang) {\n\t\t\t\t\t\t\t\t\t\t\tu.currentHealth -= session.currentZenscape.intensity\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// EACH ENEMY ATTACKS A RANDOM UNIT\n\t\t\t\t\t\t\tif (u.isFaang) {\n\t\t\t\t\t\t\t\tlet possibleTargets = allUnitsOnField.filter(\n\t\t\t\t\t\t\t\t\t(unit) => !unit.isFaang\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t// IF ZENSCAPE IS GLARE, ENEMIES MAY ATTACK EACH OTHER\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tsession.currentZenscape.name === 'Glare' &&\n\t\t\t\t\t\t\t\t\tMath.random() * 100 <\n\t\t\t\t\t\t\t\t\t\tsession.currentZenscape.intensity\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tpossibleTargets = allUnitsOnField;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tsession.eventLog.unshift(\n\t\t\t\t\t\t\t\t\tu.attackUnit(\n\t\t\t\t\t\t\t\t\t\tpossibleTargets[\n\t\t\t\t\t\t\t\t\t\t\tMath.floor(\n\t\t\t\t\t\t\t\t\t\t\t\tMath.random() *\n\t\t\t\t\t\t\t\t\t\t\t\t\tpossibleTargets.length\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tu.status.flash = false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.check(playerTeam);\n\t\t\t\t\t\t\tthis.check(playerKingdoms);\n\t\t\t\t\t\t\tthis.check(enemyUnits);\n\t\t\t\t\t\t\tthis.check(allCards);\n\t\t\t\t\t\t\tsetAllUnitsOnField(listUnits());\n\t\t\t\t\t\t}, session.notificationTimer);\n\t\t\t\t\t\tsession.notificationTimer += 1500;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\t\tpostBattle: function postBattle() {\n\t\t\tsetTimeout(() => {\n\t\t\t\tsession.eventLog.unshift({\n\t\t\t\t\tevent: `${session.currentZenscape.name} is now ${session.currentZenscape.intensity}`,\n\t\t\t\t\tgradientOne: playerTeam[0].showcase.colors.primary,\n\t\t\t\t\tgradientTwo: playerTeam[1].showcase.colors.primary,\n\t\t\t\t});\n\t\t\t\tsession.eventLog.unshift({\n\t\t\t\t\tevent: 'PLAYER TURN',\n\t\t\t\t});\n\t\t\t\tfunctions.afterEffects();\n\t\t\t\tsession.phase = 'Selection';\n\t\t\t\tsetAllUnitsOnField(listUnits());\n\t\t\t\tsession.notificationTimer = 0;\n\t\t\t}, session.notificationTimer);\n\t\t\tconsole.log(session.eventLog);\n\t\t},\n\t\tafterEffects: function afterEffects() {\n\t\t\tswitch (session.currentZenscape.name) {\n\t\t\t\tcase 'Blaze':\n\t\t\t\t\tif (playerTeam[0]) {\n\t\t\t\t\t\tplayerTeam[0].attack +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (playerTeam[1]) {\n\t\t\t\t\t\tplayerTeam[1].attack +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Lava':\n\t\t\t\t\tif (enemyUnits[0]) {\n\t\t\t\t\t\tenemyUnits[0].currentHealth -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[1]) {\n\t\t\t\t\t\tenemyUnits[1].currentHealth -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[2]) {\n\t\t\t\t\t\tenemyUnits[2].currentHealth -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[3]) {\n\t\t\t\t\t\tenemyUnits[3].currentHealth -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[4]) {\n\t\t\t\t\t\tenemyUnits[4].currentHealth -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Sandstorm':\n\t\t\t\t\tif (enemyUnits[0]) {\n\t\t\t\t\t\tenemyUnits[0].regenerationRate -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[1]) {\n\t\t\t\t\t\tenemyUnits[1].regenerationRate -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[2]) {\n\t\t\t\t\t\tenemyUnits[2].regenerationRate -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[3]) {\n\t\t\t\t\t\tenemyUnits[3].regenerationRate -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (enemyUnits[4]) {\n\t\t\t\t\t\tenemyUnits[4].regenerationRate -=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Spring':\n\t\t\t\t\tif (playerTeam[0]) {\n\t\t\t\t\t\tplayerTeam[0].energy +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (playerTeam[1]) {\n\t\t\t\t\t\tplayerTeam[1].energy +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Steam':\n\t\t\t\t\tif (playerTeam[0]) {\n\t\t\t\t\t\tplayerTeam[0].regenerationRate +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tif (playerTeam[1]) {\n\t\t\t\t\t\tplayerTeam[1].regenerationRate +=\n\t\t\t\t\t\t\tsession.currentZenscape.intensity;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log('no after effect');\n\t\t\t}\n\t\t\tallUnitsOnField.forEach((u) => {\n\t\t\t\tu.regenerateHealth();\n\t\t\t});\n\t\t},\n\t};\n\n\tconsole.log(session.eventLog);\n\n\tfunction endTurn() {\n\t\tfunctions.standBy();\n\t\tfunctions.battle();\n\t\tfunctions.postBattle();\n\t}\n\n\tconst listUnits = useCallback(() => {\n\t\tlet res = [];\n\t\tfor (let i = 0; i < playerTeam.slice(0, 2).length; i++) {\n\t\t\tres.push(playerTeam[i]);\n\t\t}\n\t\tfor (let i = 0; i < playerKingdoms.length; i++) {\n\t\t\tres.push(playerKingdoms[i]);\n\t\t}\n\t\tfor (let i = 0; i < enemyUnits.slice(0, 5).length; i++) {\n\t\t\tres.push(enemyUnits[i]);\n\t\t}\n\t\treturn res;\n\t}, [enemyUnits, playerTeam, playerKingdoms]);\n\n\tuseEffect(() => {\n\t\tif (playerTeam) {\n\t\t\tsetAllUnitsOnField(listUnits());\n\t\t}\n\t}, [enemyUnits, playerTeam, playerKingdoms, session, session.eventLog]);\n\n\treturn (\n\t\t<GameBoardWrapper>\n\t\t\t<GameInfoContainer>\n\t\t\t\t<button onClick={() => setShowRules(!showRules)}>\n\t\t\t\t\tGame Rules\n\t\t\t\t</button>\n\t\t\t\t<button onClick={endTurn}>End Turn</button>\n\t\t\t\t<GameRulesModal showRules={showRules}></GameRulesModal>\n\t\t\t\t<SessionLogContainer allUnitsOnField={allUnitsOnField}>\n\t\t\t\t\t<h1>Event Log</h1>\n\t\t\t\t\t{session.eventLog.slice(0, 9).map((action) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<ActionContainer\n\t\t\t\t\t\t\t\taction={action}\n\t\t\t\t\t\t\t\tkey={session.eventLog.indexOf(action)}>\n\t\t\t\t\t\t\t\t<p>{action.event}</p>\n\t\t\t\t\t\t\t</ActionContainer>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</SessionLogContainer>\n\t\t\t</GameInfoContainer>\n\t\t\t{enemyUnits && playerTeam && playerKingdoms ? (\n\t\t\t\t<>\n\t\t\t\t\t<EnemyFieldContainer>\n\t\t\t\t\t\t<EnemyField\n\t\t\t\t\t\t\tenemyUnits={enemyUnits}\n\t\t\t\t\t\t\tfunctions={functions}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</EnemyFieldContainer>\n\t\t\t\t\t<PlayerFieldContainer>\n\t\t\t\t\t\t<PlayerField\n\t\t\t\t\t\t\tplayerTeam={playerTeam}\n\t\t\t\t\t\t\tsetPlayerTeam={setPlayerTeam}\n\t\t\t\t\t\t\tfunctions={functions}\n\t\t\t\t\t\t\tallCards={allCards}\n\t\t\t\t\t\t\tsession={session}\n\t\t\t\t\t\t\tsetAllUnitsOnField={setAllUnitsOnField}\n\t\t\t\t\t\t\tlistUnits={listUnits}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</PlayerFieldContainer>\n\t\t\t\t\t<KingdomFieldContainer>\n\t\t\t\t\t\t<KingdomField\n\t\t\t\t\t\t\tplayerKingdoms={playerKingdoms}\n\t\t\t\t\t\t\tfunctions={functions}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</KingdomFieldContainer>\n\t\t\t\t</>\n\t\t\t) : null}\n\t\t</GameBoardWrapper>\n\t);\n};\n\nexport default GameBoard;\n","/Users/esquire/code/projects/enter-the-faang/league/src/components/EnemyField/EnemyField.js",["98","99"],"import React, { useState, useEffect } from 'react';\n\nimport {\n\tEnemyFieldWrapper,\n\tEnemyFieldLabel,\n\tEnemyFlexContainer,\n\tFaangContainer,\n\tFaangName,\n\tHealthBar,\n\tHealthBarContainer,\n\tFaangHeader,\n\tFaangContent,\n\tEnemyRank,\n} from './SCEnemyField';\n\nconst EnemyField = ({ enemyUnits, functions }) => {\n\tconst [enemyInfo, setEnemyInfo] = useState('');\n\n\tuseEffect(() => {}, [enemyUnits]);\n\n\treturn (\n\t\t<EnemyFieldWrapper>\n\t\t\t<EnemyFieldLabel>\n\t\t\t\t<h3>Enemies Remaining: {enemyUnits.length}</h3>\n\t\t\t</EnemyFieldLabel>\n\t\t\t<EnemyFlexContainer>\n\t\t\t\t{enemyUnits.slice(0, 5).map((unit) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<FaangContainer\n\t\t\t\t\t\t\tunit={unit}\n\t\t\t\t\t\t\tkey={enemyUnits.indexOf(unit)}\n\t\t\t\t\t\t\tonClick={() => functions.choose(unit)}>\n\t\t\t\t\t\t\t<FaangContent unit={unit}>\n\t\t\t\t\t\t\t\t<FaangHeader unit={unit}>\n\t\t\t\t\t\t\t\t\t<FaangName>\n\t\t\t\t\t\t\t\t\t\t<h4>{unit.pedigree}</h4>\n\t\t\t\t\t\t\t\t\t\t<h4>{unit.name}</h4>\n\t\t\t\t\t\t\t\t\t</FaangName>\n\t\t\t\t\t\t\t\t</FaangHeader>\n\t\t\t\t\t\t\t\t<HealthBarContainer unit={unit}>\n\t\t\t\t\t\t\t\t\t<HealthBar\n\t\t\t\t\t\t\t\t\t\tunit={unit}\n\t\t\t\t\t\t\t\t\t\tpercent={Math.ceil(\n\t\t\t\t\t\t\t\t\t\t\t(unit.currentHealth /\n\t\t\t\t\t\t\t\t\t\t\t\tunit.maxHealth) *\n\t\t\t\t\t\t\t\t\t\t\t\t100\n\t\t\t\t\t\t\t\t\t\t)}>\n\t\t\t\t\t\t\t\t\t\t{Math.ceil(\n\t\t\t\t\t\t\t\t\t\t\t(unit.currentHealth /\n\t\t\t\t\t\t\t\t\t\t\t\tunit.maxHealth) *\n\t\t\t\t\t\t\t\t\t\t\t\t100\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t%\n\t\t\t\t\t\t\t\t\t</HealthBar>\n\t\t\t\t\t\t\t\t</HealthBarContainer>\n\t\t\t\t\t\t\t</FaangContent>\n\t\t\t\t\t\t\t<EnemyRank>\n\t\t\t\t\t\t\t\t<h5>{unit.rank}</h5>\n\t\t\t\t\t\t\t\t<h5>{unit.species}</h5>\n\t\t\t\t\t\t\t</EnemyRank>\n\t\t\t\t\t\t</FaangContainer>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</EnemyFlexContainer>\n\t\t</EnemyFieldWrapper>\n\t);\n};\n\nexport default EnemyField;\n","/Users/esquire/code/projects/enter-the-faang/league/src/components/PlayerField/PlayerField.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/KingdomField/KingdomField.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/KingdomField/SCKingdomField.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/PlayerField/SCPlayerField.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/EnemyField/SCEnemyField.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/Data/SessionLogic.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/GameContext.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/Data/Cards.js",["100","101","102","103","104","105","106"],"import { calculations, session } from '../Data/SessionLogic'\n\nclass Card {\n    constructor(name, strength, energy) {\n        this.name = name;\n        this.strength = strength;\n        this.energy = energy;\n        this.isUsed = false;\n    }\n}\n// HEX COLORS\n// ATTACK = #FFA936, #806441\n// DEFENSE = #51A3A3, #387070\n// SUPPORT = #DD7373, #A35555\nclass AttackCard extends Card {\n\tconstructor(name, strength, energy) {\n        super(name, strength, energy);\n        // SPECIFIC TO THIS CLASS\n        this.type = 'Attack'\n        this.colors = {\n\t\t\tprimary: '#FFA936',\n\t\t\tsecondary: '#806441',\n\t\t};\n        this.description = `Deals damage to the enemy with ${this.strength} power.`;\n\t}\n\teffect(initiator, target) {\n        let percent\n        this.speed = initiator.speed\n        // IF INITIATOR HAS ENOUGH ENERGY AND HAS A VALID TARGET\n        if (initiator !== target && initiator.energy >= this.energy && initiator.isAlive) {\n\t\t\t// DO DAMAGE\n\t\t\ttarget.currentHealth -= calculations.playerDamageCalc(\n\t\t\t\tinitiator,\n\t\t\t\ttarget,\n\t\t\t\tthis.strength,\n\t\t\t\tsession\n\t\t\t);\n\t\t\t// USE THIS CARD SO IT IS SPLICED\n\t\t\tthis.isUsed = true;\n\t\t\t// SUBTRACT ENERGY COST\n\t\t\tinitiator.energy -= this.energy;\n\t\t\tif (target.currentHealth <= 0) {\n\t\t\t\ttarget.isAlive = false;\n\t\t\t}\n\t\t\t// CALCULATE PERCENTAGE FOR DISPLAY\n\t\t\tpercent = Math.ceil(\n\t\t\t\t(target.currentHealth / target.maxHealth) * 100\n\t\t\t);\n\t\t\t// IF ZENSCAPE IS FLASH ADD FLASH STATUS TO THEM\n\t\t\tif (\n\t\t\t\tsession.currentZenscape.name === 'Flash' &&\n\t\t\t\tMath.random() * 100 < session.currentZenscape.intensity\n\t\t\t) {\n\t\t\t\ttarget.status.flash = true\n\t\t\t}\n\t\t}\n        // IF INITIATOR IS TARGET CHOOSE NEW TARGET\n            if (initiator === target) {\n                console.log('CHOOSE NEW TARGET');\n            }\n            // IF INITIATOR DOES NOT HAVE ENOUGH ENERGY THIS CAN'T BE USED\n            if (initiator.energy < this.energy) {\n                console.log('THIS TITAN DOES NOT HAVE ENOUGH ENERGY');\n            }\n            // RESET ENERGY (WILL PROBABLY CHANCE)\n            initiator.energy = initiator.showcase.energy\n            // IF TARGET DIED FROM ATTACK\n            if (target.currentHealth <= 0) {\n                target.isAlive = false\n                return {\n\t\t\t\t\tevent: `card ${this.name} was used by ${initiator.name} to attack ${target.name} and it was defeated`,\n\t\t\t\t\tbgColor: initiator.showcase.colors.secondary,\n\t\t\t\t\tcolor: '#000',\n                };\n                // IF TARGET DID NOT DIE FROM THE ATTACK\n            } else return {\n\t\t\t\tevent: `card ${this.name} was used by ${initiator.name} to attack ${target.name} and now it has ${percent}% health remaining`,\n\t\t\t\tbgColor: initiator.showcase.colors.secondary,\n                color: '#000',\n                border: 'red'\n\t\t\t};\n\t}\n}\n\nclass HealCard extends Card {\n\tconstructor(name, strength, energy) {\n\t\tsuper(name, strength, energy);\n        // SPECIFIC TO THIS CLASS\n        this.type = 'Heal'\n\t\tthis.colors = {\n\t\t\tprimary: '#51A3A3',\n\t\t\tsecondary: '#387070',\n\t\t};\n        this.description = `Heals the target with ${this.strength} power.`;\n\t}\n\teffect(initiator, target) {\n        let percent\n        this.speed = initiator.speed;\n        let res = null\n        if (target.isFaang) {\n            console.log('CHOOSE NEW TARGET')\n        }\n\t\tif (initiator !== target && initiator.energy >= this.energy && !target.isFaang) {\n\t\t\tthis.isUsed = true;\n            initiator.energy -= this.energy;\n            // calculations.healCalc(initiator, target, this.strength, session)\n            if (initiator.isAlive && target.isAlive) {\n                if (\n\t\t\t\t\t(target.currentHealth +\n\t\t\t\t\t\tcalculations.healCalc(\n\t\t\t\t\t\t\tinitiator,\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tthis.strength,\n\t\t\t\t\t\t\tsession\n\t\t\t\t\t\t)) >\n\t\t\t\t\ttarget.maxHealth\n\t\t\t\t) {\n\t\t\t\t\ttarget.currentHealth = target.maxHealth;\n\t\t\t\t} else {\n                    target.currentHealth += (calculations.healCalc(\n                        initiator,\n\t\t\t\t\t\ttarget,\n\t\t\t\t\t\tthis.strength,\n\t\t\t\t\t\tsession\n                        ))\n                    }\n                percent = Math.ceil(\n                    (target.currentHealth / target.maxHealth) * 100\n                );\n                res = `${initiator.name} used Card ${this.name} to heal ${target.name}, and now it has ${percent}% health remaining`\n                console.log(initiator)\n            } else res = `${initiator.name} used Card ${this.name} in an attempt to heal ${target.name}, but it was defeated before it could be healed`;\n\t\t}\n\t\tif (initiator === target) {\n\t\t\tconsole.log('CHOOSE NEW TARGET');\n\t\t}\n\t\tif (initiator.energy < this.energy) {\n\t\t\tconsole.log('THIS TITAN DOES NOT HAVE ENOUGH ENERGY');\n\t\t}\n        initiator.energy = initiator.showcase.energy;\n        console.log('INITIATOR:', initiator.showcase)\n            return {\n\t\t\t\tevent: res,\n\t\t\t\tbgColor: initiator.showcase.colors.secondary,\n                color: '#000',\n                border: 'green'\n\t\t\t};\n\t}\n}\n\nclass SupportCard extends Card {\n\tconstructor(name, type, strength, energy) {\n\t\tsuper(name, type, strength, energy);\n        // SPECIFIC TO THIS CLASS\n        this.type = 'Support'\n\t\tthis.colors = {\n\t\t\tprimary: '#DD7373',\n\t\t\tsecondary: '#A35555',\n\t\t};\n\t\tthis.description = `Heals the target with ${this.strength} power.`;\n\t}\n\teffect(initiator, target) {\n\t\tthis.speed = initiator.speed;\n\t\tif (initiator !== target && initiator.energy >= this.energy) {\n\t\t\tthis.isUsed = true\n            console.log('it works')\n\t\t}\n\n\t\tif (initiator === target) {\n\t\t\tconsole.log('CHOOSE NEW TARGET');\n\t\t}\n\t\tif (initiator.energy < this.energy) {\n\t\t\tconsole.log('THIS TITAN DOES NOT HAVE ENOUGH ENERGY');\n\t\t}\n        initiator.energy = initiator.showcase.energy;\n            return {\n                event: '======= FIGURE OUT WHAT THE SUPPORTS DO =======',\n                color: this.colors.secondary,\n            };\n\t}\n}\n\nconst aTest = new AttackCard('a test', 1, 1)\nconst aTest2 = new AttackCard('a test2', 2, 2)\nconst aTest3 = new AttackCard('a test3', 3, 3)\nconst aTest4 = new AttackCard('a test4', 4, 4)\nconst aTest5 = new AttackCard('a test5', 5, 5)\nconst aTest6 = new AttackCard('a test6', 6, 6)\nconst aTest7 = new AttackCard('a test7', 7, 7)\nconst hTest = new HealCard('h test', 1, 1)\nconst hTest2 = new HealCard('h test2', 2, 2)\nconst hTest3 = new HealCard('h test3', 3, 3)\nconst hTest4 = new HealCard('h test4', 4, 4)\nconst hTest5 = new HealCard('h test5', 5, 5)\nconst hTest6 = new HealCard('h test6', 6, 6)\nconst hTest7 = new HealCard('h test7', 7, 7)\nconst sTest = new SupportCard('s test', 1, 1)\nconst sTest2 = new SupportCard('s test2', 2, 2)\nconst sTest3 = new SupportCard('s test3', 3, 3)\nconst sTest4 = new SupportCard('s test4', 4, 4)\nconst sTest5 = new SupportCard('s test5', 5, 5)\nconst sTest6 = new SupportCard('s test6', 6, 6)\nconst sTest7 = new SupportCard('s test7', 7, 7)\n\nexport const fullDeck = [\n    // 1\n\taTest,\n    hTest,\n    // sTest,\n    // 2\n\taTest2,\n    hTest2,\n    // sTest2,\n    // 3\n\taTest3,\n    hTest3,\n    // sTest3,\n    // 4\n\taTest4,\n    hTest4,\n    // sTest4,\n    // 5\n\taTest5,\n    hTest5,\n    // sTest5,\n    // 6\n\taTest6,\n    hTest6,\n    // sTest6,\n    //7\n\taTest7,\n    hTest7,\n    // sTest7\n];\n\nexport const allCards = session.shuffle(fullDeck)","/Users/esquire/code/projects/enter-the-faang/league/src/Pages/GameBoard/SCGameBoard.js",[],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"107","replacedBy":"111"},{"ruleId":"109","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":324,"column":7,"nodeType":"115","endLine":324,"endColumn":9,"suggestions":"116"},{"ruleId":"113","severity":1,"message":"117","line":391,"column":5,"nodeType":"115","endLine":391,"endColumn":7,"suggestions":"118"},{"ruleId":"113","severity":1,"message":"119","line":110,"column":5,"nodeType":"115","endLine":110,"endColumn":7,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":9,"column":2,"nodeType":"123","messageId":"124","endLine":9,"endColumn":16},{"ruleId":"113","severity":1,"message":"125","line":394,"column":5,"nodeType":"115","endLine":394,"endColumn":72,"suggestions":"126"},{"ruleId":"121","severity":1,"message":"127","line":17,"column":9,"nodeType":"123","messageId":"124","endLine":17,"endColumn":18},{"ruleId":"121","severity":1,"message":"128","line":17,"column":20,"nodeType":"123","messageId":"124","endLine":17,"endColumn":32},{"ruleId":"121","severity":1,"message":"129","line":197,"column":7,"nodeType":"123","messageId":"124","endLine":197,"endColumn":12},{"ruleId":"121","severity":1,"message":"130","line":198,"column":7,"nodeType":"123","messageId":"124","endLine":198,"endColumn":13},{"ruleId":"121","severity":1,"message":"131","line":199,"column":7,"nodeType":"123","messageId":"124","endLine":199,"endColumn":13},{"ruleId":"121","severity":1,"message":"132","line":200,"column":7,"nodeType":"123","messageId":"124","endLine":200,"endColumn":13},{"ruleId":"121","severity":1,"message":"133","line":201,"column":7,"nodeType":"123","messageId":"124","endLine":201,"endColumn":13},{"ruleId":"121","severity":1,"message":"134","line":202,"column":7,"nodeType":"123","messageId":"124","endLine":202,"endColumn":13},{"ruleId":"121","severity":1,"message":"135","line":203,"column":7,"nodeType":"123","messageId":"124","endLine":203,"endColumn":13},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],["136"],["137"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'airTitan', 'fireTitan', 'lightningTitan', 'metalTitan', 'setPlayerTeam', 'stoneTitan', 'terraTitan', and 'waterTitan'. Either include them or remove the dependency array. If 'setPlayerTeam' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["138"],"React Hook useEffect has missing dependencies: 'setEnemyUnits' and 'unitPool'. Either include them or remove the dependency array. If 'setEnemyUnits' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["139"],"React Hook useEffect has missing dependencies: 'airKingdom', 'fireKingdom', 'lightningKingdom', 'metalKingdom', 'setPlayerKingdoms', 'stoneKingdom', 'terraKingdom', and 'waterKingdom'. Either include them or remove the dependency array. If 'setPlayerKingdoms' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["140"],"no-unused-vars","'BoardContainer' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'listUnits' and 'setAllUnitsOnField'. Either include them or remove the dependency array. If 'setAllUnitsOnField' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["141"],"'enemyInfo' is assigned a value but never used.","'setEnemyInfo' is assigned a value but never used.","'sTest' is assigned a value but never used.","'sTest2' is assigned a value but never used.","'sTest3' is assigned a value but never used.","'sTest4' is assigned a value but never used.","'sTest5' is assigned a value but never used.","'sTest6' is assigned a value but never used.","'sTest7' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},"Update the dependencies array to be: [airTitan, fireTitan, lightningTitan, metalTitan, setPlayerTeam, stoneTitan, terraTitan, waterTitan]",{"range":"150","text":"151"},"Update the dependencies array to be: [setEnemyUnits, unitPool]",{"range":"152","text":"153"},"Update the dependencies array to be: [airKingdom, fireKingdom, lightningKingdom, metalKingdom, setPlayerKingdoms, stoneKingdom, terraKingdom, waterKingdom]",{"range":"154","text":"155"},"Update the dependencies array to be: [enemyUnits, playerTeam, playerKingdoms, session, session.eventLog, setAllUnitsOnField, listUnits]",{"range":"156","text":"157"},[8969,8971],"[airTitan, fireTitan, lightningTitan, metalTitan, setPlayerTeam, stoneTitan, terraTitan, waterTitan]",[9434,9436],"[setEnemyUnits, unitPool]",[2813,2815],"[airKingdom, fireKingdom, lightningKingdom, metalKingdom, setPlayerKingdoms, stoneKingdom, terraKingdom, waterKingdom]",[10968,11035],"[enemyUnits, playerTeam, playerKingdoms, session, session.eventLog, setAllUnitsOnField, listUnits]"]