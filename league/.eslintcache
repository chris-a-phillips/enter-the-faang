[{"/Users/esquire/code/projects/enter-the-faang/league/src/index.js":"1","/Users/esquire/code/projects/enter-the-faang/league/src/App.js":"2","/Users/esquire/code/projects/enter-the-faang/league/src/SCApp.js":"3","/Users/esquire/code/projects/enter-the-faang/league/src/Data/Unit.js":"4","/Users/esquire/code/projects/enter-the-faang/league/src/Data/FaangStats.js":"5","/Users/esquire/code/projects/enter-the-faang/league/src/Pages/WelcomeScreen/WelcomeScreen.js":"6","/Users/esquire/code/projects/enter-the-faang/league/src/Data/PlayerUnits.js":"7","/Users/esquire/code/projects/enter-the-faang/league/src/Data/EnemyUnits.js":"8","/Users/esquire/code/projects/enter-the-faang/league/src/Data/PlayerKingdoms.js":"9","/Users/esquire/code/projects/enter-the-faang/league/src/Pages/GameBoard/GameBoard.js":"10","/Users/esquire/code/projects/enter-the-faang/league/src/components/EnemyField/EnemyField.js":"11","/Users/esquire/code/projects/enter-the-faang/league/src/components/PlayerField/PlayerField.js":"12","/Users/esquire/code/projects/enter-the-faang/league/src/components/KingdomField/KingdomField.js":"13","/Users/esquire/code/projects/enter-the-faang/league/src/components/KingdomField/SCKingdomField.js":"14","/Users/esquire/code/projects/enter-the-faang/league/src/components/PlayerField/SCPlayerField.js":"15","/Users/esquire/code/projects/enter-the-faang/league/src/components/EnemyField/SCEnemyField.js":"16","/Users/esquire/code/projects/enter-the-faang/league/src/Data/SessionLogic.js":"17","/Users/esquire/code/projects/enter-the-faang/league/src/components/GameContext.js":"18","/Users/esquire/code/projects/enter-the-faang/league/src/Data/Cards.js":"19","/Users/esquire/code/projects/enter-the-faang/league/src/Pages/GameBoard/SCGameBoard.js":"20","/Users/esquire/code/projects/enter-the-faang/league/src/components/GameRules/GameRules.js":"21","/Users/esquire/code/projects/enter-the-faang/league/src/components/GameRules/SCGameRules.js":"22","/Users/esquire/code/projects/enter-the-faang/league/src/components/SessionInfo/SessionInfo.js":"23"},{"size":236,"mtime":1612132713936,"results":"24","hashOfConfig":"25"},{"size":2572,"mtime":1615526070027,"results":"26","hashOfConfig":"25"},{"size":191,"mtime":1611804813367,"results":"27","hashOfConfig":"25"},{"size":1107,"mtime":1610484726713,"results":"28","hashOfConfig":"25"},{"size":9315,"mtime":1611609709189,"results":"29","hashOfConfig":"25"},{"size":2386,"mtime":1615530079867,"results":"30","hashOfConfig":"25"},{"size":9025,"mtime":1613625939396,"results":"31","hashOfConfig":"25"},{"size":9491,"mtime":1613625902360,"results":"32","hashOfConfig":"25"},{"size":2873,"mtime":1613625925886,"results":"33","hashOfConfig":"25"},{"size":12724,"mtime":1615524887889,"results":"34","hashOfConfig":"25"},{"size":1550,"mtime":1613625805339,"results":"35","hashOfConfig":"25"},{"size":3375,"mtime":1613625880249,"results":"36","hashOfConfig":"25"},{"size":2600,"mtime":1613625867882,"results":"37","hashOfConfig":"25"},{"size":1998,"mtime":1613624923027,"results":"38","hashOfConfig":"25"},{"size":2891,"mtime":1612581501289,"results":"39","hashOfConfig":"25"},{"size":1682,"mtime":1612581501286,"results":"40","hashOfConfig":"25"},{"size":9765,"mtime":1613261658610,"results":"41","hashOfConfig":"25"},{"size":86,"mtime":1610826572545,"results":"42","hashOfConfig":"25"},{"size":7164,"mtime":1612581501276,"results":"43","hashOfConfig":"25"},{"size":2213,"mtime":1613261658612,"results":"44","hashOfConfig":"25"},{"size":1719,"mtime":1613625851456,"results":"45","hashOfConfig":"25"},{"size":1148,"mtime":1613622984563,"results":"46","hashOfConfig":"25"},{"size":562,"mtime":1615524611323,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"oulkl",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/Users/esquire/code/projects/enter-the-faang/league/src/index.js",[],["102","103"],"/Users/esquire/code/projects/enter-the-faang/league/src/App.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/SCApp.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/Data/Unit.js",[],["104","105"],"/Users/esquire/code/projects/enter-the-faang/league/src/Data/FaangStats.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/Pages/WelcomeScreen/WelcomeScreen.js",["106"],"/Users/esquire/code/projects/enter-the-faang/league/src/Data/PlayerUnits.js",["107"],"import React, { useEffect } from 'react';\nimport { faang } from './FaangStats';\n\nfunction PlayerUnits ({ trueSkill, setPlayerTeam }) {\n\tconst eliteStats = faang.elite;\n\n\t\tclass Titan {\n\t\t\tconstructor(\n\t\t\t\tname,\n\t\t\t\telement,\n\t\t\t\tkingdom,\n\t\t\t\tcurrentHealth,\n\t\t\t\tmaxHealth,\n\t\t\t\tattack,\n\t\t\t\tdefense,\n\t\t\t\tregeneration,\n\t\t\t\tspeed,\n\t\t\t\tenergy,\n\t\t\t\tzen,\n\t\t\t\tshowcase\n\t\t\t) {\n\t\t\t\t// specs\n\t\t\t\tthis.isAlive = true;\n\t\t\t\tthis.isTitan = true;\n\t\t\t\t// stats\n\t\t\t\tthis.name = name;\n\t\t\t\tthis.element = element;\n\t\t\t\tthis.kingdom = kingdom;\n\t\t\t\tthis.currentHealth = currentHealth;\n\t\t\t\tthis.maxHealth = maxHealth;\n\t\t\t\tthis.attack = attack;\n\t\t\t\tthis.defense = defense;\n\t\t\t\tthis.regenerationRate = (100 - regeneration) / 25;\n\t\t\t\tthis.speed = speed;\n\t\t\t\tthis.energy = energy;\n\t\t\t\tthis.zen = zen;\n\t\t\t\tthis.showcase = showcase;\n\t\t\t}\n\t\t\tregenerateHealth() {\n\t\t\t\tif (\n\t\t\t\t\tthis.currentHealth < this.maxHealth &&\n\t\t\t\t\tthis.regenerationRate > 0\n\t\t\t\t) {\n\t\t\t\t\tthis.currentHealth +=\n\t\t\t\t\t\tthis.currentHealth * (0.01 * this.regenerationRate);\n\t\t\t\t}\n\t\t\t}\n\t\t\tattackUnit(unit) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`${this.name} attacked ${unit.name} and now it has ${unit.currentHealth} health remaining`\n\t\t\t\t);\n\t\t\t\tunit.currentHealth -= this.attack;\n\t\t\t\tif (unit.currentHealth <= 0) {\n\t\t\t\t\tunit.isAlive = false;\n\t\t\t\t\tconsole.log(`${unit.name} died from the attack`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\tfunction averageStats(object) {\n\t\t// TURN THE OBJECT INTO AN ARRAY OF OBJECTS\n\t\tlet data = Object.entries(object);\n\t\t// CREATE AN ARRAY FOR MAPPED DATA TO GO INTO\n\t\tlet dataArray = [];\n\t\t// CREATE AN OBJECT TO HOLD ALL STATS FROM MAPPED ARRAY\n\t\tlet statsObject = {\n\t\t\thealth: [],\n\t\t\tattack: [],\n\t\t\tdefense: [],\n\t\t\tregeneration: [],\n\t\t\tspeed: [],\n\t\t\ttotal: [],\n\t\t};\n\t\t// PUSH SEPARATE DATA SO IT CAN BE MUTATED\n\t\tdata.forEach((e) => {\n            dataArray.push(e[1]);\n\t\t});\n\t\t// PUSH ALL STATS INTO STATS OBJECT\n\t\tfor (let i = 0; i < dataArray.length; i++) {\n\t\t\tstatsObject.health.push(dataArray[i].health);\n\t\t\tstatsObject.attack.push(dataArray[i].attack);\n\t\t\tstatsObject.defense.push(dataArray[i].defense);\n\t\t\tstatsObject.regeneration.push(dataArray[i].regeneration);\n\t\t\tstatsObject.speed.push(dataArray[i].speed);\n\t\t\tstatsObject.total.push(dataArray[i].total);\n\t\t}\n\n\t\t// REDUCE ALL STATS IN EACH ARRAY INTO ONE VALUE\n\t\t// health\n\t\tstatsObject.health =\n\t\t\tstatsObject.health.reduce((a, b) => a + b, 0) /\n\t\t\tstatsObject.health.length;\n\t\t// attack\n\t\tstatsObject.attack =\n\t\t\tstatsObject.attack.reduce((a, b) => a + b, 0) /\n\t\t\tstatsObject.attack.length;\n\t\t// defense\n\t\tstatsObject.defense =\n\t\t\tstatsObject.defense.reduce((a, b) => a + b, 0) /\n\t\t\tstatsObject.defense.length;\n\t\t// regeneration\n\t\tstatsObject.regeneration =\n\t\t\tstatsObject.regeneration.reduce((a, b) => a + b, 0) /\n\t\t\tstatsObject.regeneration.length;\n\t\t// speed\n\t\tstatsObject.speed =\n\t\t\tstatsObject.speed.reduce((a, b) => a + b, 0) /\n\t\t\tstatsObject.speed.length;\n\t\t// total\n\t\tstatsObject.total =\n\t\t\tstatsObject.total.reduce((a, b) => a + b, 0) /\n            statsObject.total.length;\n        return statsObject\n\t}\n\n    const titans = {\n\t\tfire: {\n\t\t\thealth: 6,\n\t\t\tattack: 9,\n\t\t\tdefense: 5,\n\t\t\tenergy: 8,\n\t\t\tregeneration: 4,\n\t\t\tspeed: 7,\n\t\t\tzen: 5,\n\t\t\tcolors: {\n\t\t\t\tprimary: '#F7130A',\n\t\t\t\tsecondary: '#ED7609',\n\t\t\t\tcontrast: '#E02A02',\n\t\t\t},\n\t\t},\n\t\twater: {\n\t\t\thealth: 9,\n\t\t\tattack: 5,\n\t\t\tdefense: 7,\n\t\t\tenergy: 5,\n\t\t\tregeneration: 8,\n\t\t\tspeed: 6,\n\t\t\tzen: 4,\n\t\t\tcolors: {\n\t\t\t\tprimary: '#2F30E0',\n\t\t\t\tsecondary: '#268FED',\n\t\t\t\tcontrast: '#9326ED',\n\t\t\t},\n\t\t},\n\t\tstone: {\n\t\t\thealth: 8,\n\t\t\tattack: 5,\n\t\t\tdefense: 9,\n\t\t\tenergy: 4,\n\t\t\tregeneration: 6,\n\t\t\tspeed: 5,\n\t\t\tzen: 7,\n\t\t\tcolors: {\n\t\t\t\tprimary: '#706459',\n\t\t\t\tsecondary: '#877A64',\n\t\t\t\tcontrast: '#5F727D',\n\t\t\t},\n\t\t},\n\t\tair: {\n\t\t\thealth: 4,\n\t\t\tattack: 6,\n\t\t\tdefense: 5,\n\t\t\tenergy: 9,\n\t\t\tregeneration: 7,\n\t\t\tspeed: 8,\n\t\t\tzen: 5,\n\t\t\tcolors: {\n\t\t\t\tprimary: '#D0DAD8',\n\t\t\t\tsecondary: '#CFDEE6',\n\t\t\t\tcontrast: '#CFE6D4',\n\t\t\t},\n\t\t},\n\t\tlightning: {\n\t\t\thealth: 5,\n\t\t\tattack: 8,\n\t\t\tdefense: 4,\n\t\t\tenergy: 7,\n\t\t\tregeneration: 5,\n\t\t\tspeed: 9,\n\t\t\tzen: 6,\n\t\t\tcolors: {\n\t\t\t\tprimary: '#FAED3E',\n\t\t\t\tsecondary: '#E3D346',\n\t\t\t\tcontrast: '#23FAF5',\n\t\t\t},\n\t\t},\n\t\tterra: {\n\t\t\thealth: 7,\n\t\t\tattack: 4,\n\t\t\tdefense: 6,\n\t\t\tenergy: 5,\n\t\t\tregeneration: 9,\n\t\t\tspeed: 5,\n\t\t\tzen: 8,\n\t\t\tcolors: {\n\t\t\t\tprimary: '#3AC92A',\n\t\t\t\tsecondary: '#24E04A',\n\t\t\t\tcontrast: '#8B4513',\n\t\t\t},\n\t\t},\n\t\tmetal: {\n\t\t\thealth: 5,\n\t\t\tattack: 7,\n\t\t\tdefense: 8,\n\t\t\tenergy: 6,\n\t\t\tregeneration: 5,\n\t\t\tspeed: 4,\n\t\t\tzen: 9,\n\t\t\tcolors: {\n\t\t\t\tprimary: '#DBDBDB',\n\t\t\t\tsecondary: '#C4C4C4',\n\t\t\t\tcontrast: '#B5B5B5',\n\t\t\t},\n\t\t},\n\t};\n    \n    const fireTitan = new Titan(\n\t\t'Ajna',\n\t\t'Fire',\n\t\t'Fire Kingdom',\n        Math.floor(averageStats(eliteStats).health * (titans.fire.health * .1)),\n        Math.floor(averageStats(eliteStats).health * (titans.fire.health * .1)),\n        averageStats(eliteStats).attack * (titans.fire.attack * .1),\n        averageStats(eliteStats).defense * (titans.fire.defense * .1),\n        averageStats(eliteStats).regeneration * (titans.fire.regeneration * .1),\n        averageStats(eliteStats).speed * (titans.fire.speed * .1),\n        titans.fire.energy,\n        titans.fire.zen,\n        titans.fire\n    );\n\n    const waterTitan = new Titan(\n\t\t'Mulad',\n\t\t'Water',\n\t\t'Water Kingdom',\n        Math.floor(averageStats(eliteStats).health * (titans.water.health * .1)),\n        Math.floor(averageStats(eliteStats).health * (titans.water.health * .1)),\n        averageStats(eliteStats).attack * (titans.water.attack * .1),\n        averageStats(eliteStats).defense * (titans.water.defense * .1),\n        averageStats(eliteStats).regeneration * (titans.water.regeneration * .1),\n        averageStats(eliteStats).speed * (titans.water.speed * .1),\n        titans.water.energy,\n        titans.water.zen,\n        titans.water\n    );\n\n    const stoneTitan = new Titan(\n\t\t'Vishu',\n\t\t'Rock',\n\t\t'Stone Kingdom',\n        Math.floor(averageStats(eliteStats).health * (titans.stone.health * .1)),\n        Math.floor(averageStats(eliteStats).health * (titans.stone.health * .1)),\n        averageStats(eliteStats).attack * (titans.stone.attack * .1),\n        averageStats(eliteStats).defense * (titans.stone.defense * .1),\n        averageStats(eliteStats).regeneration * (titans.stone.regeneration * .1),\n        averageStats(eliteStats).speed * (titans.stone.speed * .1),\n        titans.stone.energy,\n        titans.stone.zen,\n        titans.stone\n    );\n\n    const airTitan = new Titan(\n\t\t'Nabhi',\n\t\t'Air',\n\t\t'Air Kingdom',\n        Math.floor(averageStats(eliteStats).health * (titans.air.health * .1)),\n        Math.floor(averageStats(eliteStats).health * (titans.air.health * .1)),\n        averageStats(eliteStats).attack * (titans.air.attack * .1),\n        averageStats(eliteStats).defense * (titans.air.defense * .1),\n        averageStats(eliteStats).regeneration * (titans.air.regeneration * .1),\n        averageStats(eliteStats).speed * (titans.air.speed * .1),\n        titans.air.energy,\n        titans.air.zen,\n        titans.air\n    );\n\n    const lightningTitan = new Titan(\n\t\t'Svadhi',\n\t\t'Electricity',\n\t\t'Lightning Kingdom',\n        Math.floor(averageStats(eliteStats).health * (titans.lightning.health * .1)),\n        Math.floor(averageStats(eliteStats).health * (titans.lightning.health * .1)),\n        averageStats(eliteStats).attack * (titans.lightning.attack * .1),\n        averageStats(eliteStats).defense * (titans.lightning.defense * .1),\n        averageStats(eliteStats).regeneration * (titans.lightning.regeneration * .1),\n        averageStats(eliteStats).speed * (titans.lightning.speed * .1),\n        titans.lightning.energy,\n        titans.lightning.zen,\n        titans.lightning\n    );\n\n    const terraTitan = new Titan(\n\t\t'Sahas',\n\t\t'Plant',\n\t\t'Terra Kingdom',\n        Math.floor(averageStats(eliteStats).health * (titans.terra.health * .1)),\n        Math.floor(averageStats(eliteStats).health * (titans.terra.health * .1)),\n        averageStats(eliteStats).attack * (titans.terra.attack * .1),\n        averageStats(eliteStats).defense * (titans.terra.defense * .1),\n        averageStats(eliteStats).regeneration * (titans.terra.regeneration * .1),\n        averageStats(eliteStats).speed * (titans.terra.speed * .1),\n        titans.terra.energy,\n        titans.terra.zen,\n        titans.terra\n    );\n\n    const metalTitan = new Titan(\n\t\t'Anaht',\n\t\t'Metal',\n\t\t'Metal Kingdom',\n        Math.floor(averageStats(eliteStats).health * (titans.metal.health * .1)),\n        Math.floor(averageStats(eliteStats).health * (titans.metal.health * .1)),\n        averageStats(eliteStats).attack * (titans.metal.attack * .1),\n        averageStats(eliteStats).defense * (titans.metal.defense * .1),\n        averageStats(eliteStats).regeneration * (titans.metal.regeneration * .1),\n        averageStats(eliteStats).speed * (titans.metal.speed * .1),\n        titans.metal.energy,\n        titans.metal.zen,\n        titans.metal\n    );\n\n    useEffect(() => {\n\t\tsetPlayerTeam([fireTitan, waterTitan, stoneTitan, airTitan, lightningTitan, terraTitan, metalTitan]);\n    },[])\n\n\treturn <div></div>;\n};\n\nexport default PlayerUnits;\n","/Users/esquire/code/projects/enter-the-faang/league/src/Data/EnemyUnits.js",["108"],"import React, { useEffect } from 'react';\nimport { pedigree, faang, randomNames } from './FaangStats';\nimport { session } from './SessionLogic';\nimport { calculations } from '../Data/SessionLogic'\n\nfunction EnemyFaangs ({ difficulty, armySize, setEnemyUnits }) {\n\tconst unitPool = [];\n\tclass BasicFaang {\n\t\tconstructor(\n\t\t\tname,\n\t\t\tcurrentHealth,\n\t\t\tmaxHealth,\n\t\t\tattack,\n\t\t\tdefense,\n\t\t\tregeneration,\n\t\t\tspeed,\n\t\t\trank,\n\t\t\tpedigree,\n\t\t\tspecies,\n\t\t\tshowcase\n\t\t) {\n\t\t\t// specs\n\t\t\tthis.isAlive = true;\n\t\t\tthis.rank = rank;\n\t\t\tthis.pedigree = pedigree;\n\t\t\tthis.species = species;\n\t\t\tthis.showcase = showcase;\n\t\t\t// stats\n\t\t\tthis.name = name;\n\t\t\tthis.currentHealth = currentHealth;\n\t\t\tthis.maxHealth = maxHealth;\n\t\t\tthis.attack = attack;\n\t\t\tthis.defense = defense;\n\t\t\tthis.regenerationRate = (100 - regeneration) / 25;\n\t\t\tthis.speed = speed;\n\t\t\tthis.isFaang = true;\n\t\t\tthis.status = {\n\t\t\t\tflash: false\n\t\t\t}\n\t\t}\n\t\tregenerateHealth() {\n\t\t\t// IF CURRENT HEALTH IS LESS THAN MAX HEALTH AND REGENERATION RATE IS POSITIVE\n\t\t\tif (this.currentHealth < this.maxHealth && this.regenerationRate > 0) {\n\t\t\t\t// IF REGENERATION WILL BOOST HEALTH PAST MAX HEALTH\n\t\t\t\tif ((this.currentHealth += (this.currentHealth * ( .01 * this.regenerationRate))) > this.maxHealth) {\n\t\t\t\t\t// MAKE CURRENT HEALTH MAX HEALTH\n\t\t\t\t\tthis.currentHealth = this.maxHealth\n\t\t\t\t\t// ELSE REGENERATE\n\t\t\t\t} else {\n\t\t\t\t\tthis.currentHealth +=\n\t\t\t\t\t\tthis.currentHealth * (0.01 * this.regenerationRate);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tattackUnit(target) {\n\t\t\t// IF THIS IS ALIVE\n\t\t\tif (this.isAlive) {\n\t\t\t\t// IF ZENSCAPE IS SMOKE THE ATTACK MAY MISS\n\t\t\t\tif (session.currentZenscape.name === 'Smoke' && Math.random() * 100 < session.currentZenscape.intensity) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tevent: `${this.name} missed its attack`,\n\t\t\t\t\t\t\tbgColor: this.showcase.rankColor,\n\t\t\t\t\t\t\tcolor: '#fff',\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t// IF ZENSCAPE IS FLASH IT MAY NOT ATTACK\n\t\t\t\tif (session.currentZenscape.name === 'Flash' && Math.random() * 100 < session.currentZenscape.intensity && this.status.flash) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tevent: `${this.name} didn't attack because it was flashed`,\n\t\t\t\t\t\t\tbgColor: this.showcase.rankColor,\n\t\t\t\t\t\t\tcolor: '#fff',\n\t\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t// THIS ATTACK\n\t\t\t\ttarget.currentHealth -= calculations.enemyDamageCalc(\n\t\t\t\t\tthis,\n\t\t\t\t\ttarget,\n\t\t\t\t\tsession\n\t\t\t\t);\n\t\t\t\tlet percent = Math.ceil(\n\t\t\t\t\t(target.currentHealth / target.maxHealth) * 100\n\t\t\t\t);\n\t\t\t\t// IF ZENSCAPE IS THORN THIS UNIT ALSO TAKES DAMAGE\n\t\t\t\tif (\n\t\t\t\t\tsession.currentZenscape.name === 'Thorn' &&\n\t\t\t\t\tMath.random() * 100 < session.currentZenscape.intensity\n\t\t\t\t) {\n\t\t\t\t\tthis.currentHealth -= session.currentZenscape.intensity;\n\t\t\t\t}\n\t\t\t\t// IF ATTACK WAS FATAL\n\t\t\t\tif (target.currentHealth <= 0) {\n\t\t\t\t\ttarget.isAlive = false;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tevent: `${this.name} attacked ${target.name} and it was defeated`,\n\t\t\t\t\t\tbgColor: this.showcase.rankColor,\n\t\t\t\t\t\tcolor: '#fff',\n\t\t\t\t\t};\n\t\t\t\t\t// IF ATTACK WENT THROUGH BUT WAS NOT FATAL\n\t\t\t\t} else\n\t\t\t\t\treturn {\n\t\t\t\t\t\tevent: `${this.name} attacked ${target.name} and now it has ${percent}% health remaining`,\n\t\t\t\t\t\tbgColor: this.showcase.rankColor,\n\t\t\t\t\t\tcolor: '#fff',\n\t\t\t\t\t};\n\t\t\t\t// IF THIS IS NOT ALIVE\n\t\t\t} else return {\n\t\t\t\tevent: `${this.name} couldn't attack becuase it was defeated by a faster unit`,\n\t\t\t\tbgColor: this.showcase.rankColor,\n\t\t\t\tcolor: '#fff',\n\t\t\t};\n\t\t}\n\t}\n\n\tclass AdvancedFaang extends BasicFaang {\n\t\tconstructor(\n\t\t\tname,\n\t\t\tcurrentHealth,\n\t\t\tmaxHealth,\n\t\t\tattack,\n\t\t\tdefense,\n\t\t\tregeneration,\n\t\t\tspeed,\n\t\t\trank,\n\t\t\tpedigree,\n\t\t\tspecies,\n\t\t\tshowcase,\n\t\t\tregenerationRate\n\t\t) {\n\t\t\tsuper(\n\t\t\t\tname,\n\t\t\t\tcurrentHealth,\n\t\t\t\tmaxHealth,\n\t\t\t\tattack,\n\t\t\t\tdefense,\n\t\t\t\tregeneration,\n\t\t\t\tspeed,\n\t\t\t\trank,\n\t\t\t\tpedigree,\n\t\t\t\tspecies,\n\t\t\t\tshowcase,\n\t\t\t\tregenerationRate\n\t\t\t);\n\t\t\tthis.isAdmin = true;\n\t\t\tthis.class = 'Advanced';\n\t\t}\n\t}\n\n\tclass EliteFaang extends AdvancedFaang {\n\t\tconstructor(\n\t\t\tname,\n\t\t\tcurrentHealth,\n\t\t\tmaxHealth,\n\t\t\tattack,\n\t\t\tdefense,\n\t\t\tregeneration,\n\t\t\tspeed,\n\t\t\trank,\n\t\t\tpedigree,\n\t\t\tspecies,\n\t\t\tshowcase,\n\t\t\tregenerationRate\n\t\t) {\n\t\t\tsuper(\n\t\t\t\tname,\n\t\t\t\tcurrentHealth,\n\t\t\t\tmaxHealth,\n\t\t\t\tattack,\n\t\t\t\tdefense,\n\t\t\t\tregeneration,\n\t\t\t\tspeed,\n\t\t\t\trank,\n\t\t\t\tpedigree,\n\t\t\t\tspecies,\n\t\t\t\tshowcase,\n\t\t\t\tregenerationRate\n\t\t\t);\n\t\t\tthis.class = 'Elite';\n\t\t}\n\t}\n\n\t// FAANG GENERATOR\n\tlet basicUnits = faang.basic;\n\tlet advancedUnits = faang.advanced;\n\tlet eliteUnits = faang.elite;\n\n\t// RANDOM UNIT GENERATOR THAT PUSHES THE UNITS INTO THE UNIT POOL\n\tfunction generateRandomUnit(rank) {\n\t\tlet length = Object.keys(rank).length;\n\t\tlet randomNumber = Math.floor(Math.random() * length);\n\t\tlet randomUnit = rank[Object.keys(rank)[randomNumber]];\n\t\tlet percentChance = Math.floor(Math.random() * 100);\n\t\trandomUnit.name =\n\t\t\trandomNames[Math.floor(Math.random() * randomNames.length)];\n\t\tif (rank.dra.rank === 'Basic') {\n\t\t\tif (percentChance <= 95) {\n\t\t\t\trandomUnit.pedigree =\n\t\t\t\t\tpedigree.commonLevelOne[\n\t\t\t\t\t\tMath.floor(\n\t\t\t\t\t\t\tMath.random() * pedigree.commonLevelOne.length\n\t\t\t\t\t\t)\n\t\t\t\t\t];\n\t\t\t} else {\n\t\t\t\trandomUnit.pedigree =\n\t\t\t\t\tpedigree.specialLevelOne[\n\t\t\t\t\t\tMath.floor(\n\t\t\t\t\t\t\tMath.random() * pedigree.specialLevelOne.length\n\t\t\t\t\t\t)\n\t\t\t\t\t];\n\t\t\t}\n\t\t\tunitPool.push(\n\t\t\t\tnew BasicFaang(\n\t\t\t\t\trandomUnit.name,\n\t\t\t\t\trandomUnit.health,\n\t\t\t\t\trandomUnit.health,\n\t\t\t\t\trandomUnit.attack,\n\t\t\t\t\trandomUnit.defense,\n\t\t\t\t\trandomUnit.regeneration,\n\t\t\t\t\trandomUnit.speed,\n\t\t\t\t\trandomUnit.rank,\n\t\t\t\t\trandomUnit.pedigree,\n\t\t\t\t\trandomUnit.species,\n\t\t\t\t\tcreateShowcase(randomUnit)\n\t\t\t\t)\n\t\t\t);\n\t\t} else if (rank.dra.rank === 'Advanced') {\n\t\t\tif (percentChance <= 95) {\n\t\t\t\trandomUnit.pedigree =\n\t\t\t\t\tpedigree.commonLevelTwo[\n\t\t\t\t\t\tMath.floor(\n\t\t\t\t\t\t\tMath.random() * pedigree.commonLevelTwo.length\n\t\t\t\t\t\t)\n\t\t\t\t\t];\n\t\t\t} else {\n\t\t\t\trandomUnit.pedigree =\n\t\t\t\t\tpedigree.specialLevelTwo[\n\t\t\t\t\t\tMath.floor(\n\t\t\t\t\t\t\tMath.random() * pedigree.specialLevelTwo.length\n\t\t\t\t\t\t)\n\t\t\t\t\t];\n\t\t\t}\n\t\t\tunitPool.push(\n\t\t\t\tnew AdvancedFaang(\n\t\t\t\t\trandomUnit.name,\n\t\t\t\t\trandomUnit.health,\n\t\t\t\t\trandomUnit.health,\n\t\t\t\t\trandomUnit.attack,\n\t\t\t\t\trandomUnit.defense,\n\t\t\t\t\trandomUnit.regeneration,\n\t\t\t\t\trandomUnit.speed,\n\t\t\t\t\trandomUnit.rank,\n\t\t\t\t\trandomUnit.pedigree,\n\t\t\t\t\trandomUnit.species,\n\t\t\t\t\tcreateShowcase(randomUnit)\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\tif (percentChance <= 95) {\n\t\t\t\trandomUnit.pedigree =\n\t\t\t\t\tpedigree.commonLevelThree[\n\t\t\t\t\t\tMath.floor(\n\t\t\t\t\t\t\tMath.random() * pedigree.commonLevelThree.length\n\t\t\t\t\t\t)\n\t\t\t\t\t];\n\t\t\t} else {\n\t\t\t\trandomUnit.pedigree =\n\t\t\t\t\tpedigree.specialLevelThree[\n\t\t\t\t\t\tMath.floor(\n\t\t\t\t\t\t\tMath.random() * pedigree.specialLevelThree.length\n\t\t\t\t\t\t)\n\t\t\t\t\t];\n\t\t\t}\n\t\t\tunitPool.push(\n\t\t\t\tnew EliteFaang(\n\t\t\t\t\trandomUnit.name,\n\t\t\t\t\trandomUnit.health,\n\t\t\t\t\trandomUnit.health,\n\t\t\t\t\trandomUnit.attack,\n\t\t\t\t\trandomUnit.defense,\n\t\t\t\t\trandomUnit.regeneration,\n\t\t\t\t\trandomUnit.speed,\n\t\t\t\t\trandomUnit.rank,\n\t\t\t\t\trandomUnit.pedigree,\n\t\t\t\t\trandomUnit.species,\n\t\t\t\t\tcreateShowcase(randomUnit)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\t// SHOWCASE CREATOR\n\tfunction createShowcase(unit) {\n\t\tlet showcase = {\n\t\t\tdescription: null,\n\t\t\trankColor: null,\n\t\t\tpedigreeColor: null,\n\t\t\tspeciesColor: null,\n\t\t};\n\n\t\t// SET COLOR FOR RANKING\n\t\tswitch (unit.rank) {\n\t\t\tcase 'Basic':\n\t\t\t\tshowcase.rankColor = '#9867FF';\n\t\t\t\tbreak;\n\t\t\tcase 'Advanced':\n\t\t\t\tshowcase.rankColor = '#5C25BA';\n\t\t\t\tbreak;\n\t\t\tcase 'Elite':\n\t\t\t\tshowcase.rankColor = '#24183D';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\t// SET COLOR FOR SPECIES\n\t\tswitch (unit.species) {\n\t\t\tcase 'Dra':\n\t\t\t\tshowcase.speciesColor = '#5966FF';\n\t\t\t\tbreak;\n\t\t\tcase 'Tyr':\n\t\t\t\tshowcase.speciesColor = '#FF7373';\n\t\t\t\tbreak;\n\t\t\tcase 'Sal':\n\t\t\t\tshowcase.speciesColor = '#FFD640';\n\t\t\t\tbreak;\n\t\t\tcase 'Met':\n\t\t\t\tshowcase.speciesColor = '#4DFF80';\n\t\t\t\tbreak;\n\t\t\tcase 'Gar':\n\t\t\t\tshowcase.speciesColor = '#4BDDFF';\n\t\t\t\tbreak;\n\t\t\tcase 'Hyd':\n\t\t\t\tshowcase.speciesColor = '#FF9230';\n\t\t\t\tbreak;\n\t\t\tcase 'Goo':\n\t\t\t\tshowcase.speciesColor = '#DE63FF';\n\t\t\t\tbreak;\n\t\t\tcase 'Kom':\n\t\t\t\tshowcase.speciesColor = '#B5FF3D';\n\t\t\t\tbreak;\n\t\t\tcase 'Pul':\n\t\t\t\tshowcase.speciesColor = '#314511';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// SET COLOR FOR PEDIGREE\n\t\tif (pedigree.commonLevelOne.includes(unit.pedigree)) {\n\t\t\tshowcase.pedigreeColor = '#9C5221';\n\t\t} else if (pedigree.specialLevelOne.includes(unit.pedigree)) {\n\t\t\tshowcase.pedigreeColor = '#9C5221';\n\t\t} else if (pedigree.commonLevelTwo.includes(unit.pedigree)) {\n\t\t\tshowcase.pedigreeColor = '#AAA9AD';\n\t\t} else if (pedigree.specialLevelTwo.includes(unit.pedigree)) {\n\t\t\tshowcase.pedigreeColor = '#AAA9AD';\n\t\t} else if (pedigree.commonLevelThree.includes(unit.pedigree)) {\n\t\t\tshowcase.pedigreeColor = '#F5D327';\n\t\t} else if (pedigree.specialLevelThree.includes(unit.pedigree)) {\n\t\t\tshowcase.pedigreeColor = '#F0CE26';\n\t\t}\n\t\treturn showcase;\n\t}\n\n\t// PLAYER GAME SETTINGS\n\n\tfor (let i = 0; i < armySize; i++) {\n\t\t// SELECT PERCENTAGE OF UNITS WILL HAVE WHICH CLASSES\n\t\tlet difficultyArray = [];\n\t\tif (difficulty === 'easy') {\n\t\t\tdifficultyArray = [70, 95];\n\t\t} else if (difficulty === 'normal') {\n\t\t\tdifficultyArray = [60, 90];\n\t\t} else if (difficulty === 'veteran') {\n\t\t\tdifficultyArray = [40, 70];\n\t\t} else if (difficulty === 'insane') {\n\t\t\tdifficultyArray = [20, 50];\n\t\t}\n\n\t\t// SELECT HOW MANY UNITS WILL BE CREATED\n\t\tlet percentChance = Math.floor(Math.random() * 100);\n\t\tif (percentChance < difficultyArray[0]) {\n\t\t\tgenerateRandomUnit(basicUnits);\n\t\t} else if (percentChance < difficultyArray[1]) {\n\t\t\tgenerateRandomUnit(advancedUnits);\n\t\t} else {\n\t\t\tgenerateRandomUnit(eliteUnits);\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tsetEnemyUnits(unitPool);\n\t}, []);\n\n\treturn <div></div>;\n};\n\nexport default EnemyFaangs;\n","/Users/esquire/code/projects/enter-the-faang/league/src/Data/PlayerKingdoms.js",["109"],"import React, { useEffect } from 'react';\n\nfunction PlayerKingdoms ({ setPlayerKingdoms, playerTeam }) {\n\n\tclass Kingdom {\n\t\tconstructor(\n\t\t\tname,\n\t\t\tmaxHealth,\n\t\t\tcurrentHealth,\n\t\t\tdefense,\n\t\t\tregenerationRate,\n\t\t\tshowcase\n\t\t) {\n\t\t\t// specs\n\t\t\tthis.isAlive = true;\n\t\t\tthis.isKingdom = true;\n\t\t\t// stats\n\t\t\tthis.name = name;\n\t\t\tthis.maxHealth = maxHealth;\n\t\t\tthis.currentHealth = currentHealth;\n\t\t\tthis.defense = defense;\n\t\t\tthis.regenerationRate = regenerationRate;\n\t\t\tthis.showcase = showcase;\n\t\t\tthis.speed = 0;\n\t\t}\n\t\tregenerateHealth() {\n\t\t\tif (\n\t\t\t\tthis.currentHealth < this.maxHealth &&\n\t\t\t\tthis.regenerationRate > 0\n\t\t\t) {\n\t\t\t\tthis.currentHealth +=\n\t\t\t\t\tthis.currentHealth * (0.01 * this.regenerationRate);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst fireKingdom = new Kingdom(\n\t\t'Fire Kingdom',\n\t\tMath.floor({ ...playerTeam[0] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[0] }.currentHealth) * 3,\n\t\t{ ...playerTeam[0] }.defense,\n\t\t{ ...playerTeam[0] }.regenerationRate,\n\t\t{ ...playerTeam[0] }.showcase,\n\t);\n\n\tconst waterKingdom = new Kingdom(\n\t\t'Water Kingdom',\n\t\tMath.floor({ ...playerTeam[1] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[1] }.currentHealth) * 3,\n\t\t{ ...playerTeam[1] }.defense,\n\t\t{ ...playerTeam[1] }.regenerationRate,\n\t\t{ ...playerTeam[1] }.showcase,\n\t);\n\n\tconst stoneKingdom = new Kingdom(\n\t\t'Stone Kingdom',\n\t\tMath.floor({ ...playerTeam[2] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[2] }.currentHealth) * 3,\n\t\t{ ...playerTeam[2] }.defense,\n\t\t{ ...playerTeam[2] }.regenerationRate,\n\t\t{ ...playerTeam[2] }.showcase,\n\t);\n\n\tconst airKingdom = new Kingdom(\n\t\t'Air Kingdom',\n\t\tMath.floor({ ...playerTeam[3] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[3] }.currentHealth) * 3,\n\t\t{ ...playerTeam[3] }.defense,\n\t\t{ ...playerTeam[3] }.regenerationRate,\n\t\t{ ...playerTeam[3] }.showcase,\n\t);\n\n\tconst lightningKingdom = new Kingdom(\n\t\t'Lightning Kingdom',\n\t\tMath.floor({ ...playerTeam[4] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[4] }.currentHealth) * 3,\n\t\t{ ...playerTeam[4] }.defense,\n\t\t{ ...playerTeam[4] }.regenerationRate,\n\t\t{ ...playerTeam[4] }.showcase,\n\t);\n\n\tconst terraKingdom = new Kingdom(\n\t\t'Terra Kingdom',\n\t\tMath.floor({ ...playerTeam[5] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[5] }.currentHealth) * 3,\n\t\t{ ...playerTeam[5] }.defense,\n\t\t{ ...playerTeam[5] }.regenerationRate,\n\t\t{ ...playerTeam[5] }.showcase,\n\t);\n\n\tconst metalKingdom = new Kingdom(\n\t\t'Metal Kingdom',\n\t\tMath.floor({ ...playerTeam[6] }.currentHealth) * 3,\n\t\tMath.floor({ ...playerTeam[6] }.currentHealth) * 3,\n\t\t{ ...playerTeam[6] }.defense,\n\t\t{ ...playerTeam[6] }.regenerationRate,\n\t\t{ ...playerTeam[6] }.showcase,\n\t);\n\n\tuseEffect(() => {\n\t\tsetPlayerKingdoms([\n\t\t\tfireKingdom,\n\t\t\twaterKingdom,\n\t\t\tstoneKingdom,\n\t\t\tairKingdom,\n\t\t\tlightningKingdom,\n\t\t\tterraKingdom,\n\t\t\tmetalKingdom,\n\t\t]);\n\t}, []);\n\n\treturn <div></div>;\n};\n\nexport default PlayerKingdoms;\n","/Users/esquire/code/projects/enter-the-faang/league/src/Pages/GameBoard/GameBoard.js",["110","111","112"],"/Users/esquire/code/projects/enter-the-faang/league/src/components/EnemyField/EnemyField.js",["113","114"],"import React, { useState, useEffect } from 'react';\n\nimport {\n\tEnemyFieldWrapper,\n\tEnemyFieldLabel,\n\tEnemyFlexContainer,\n\tFaangContainer,\n\tFaangName,\n\tHealthBar,\n\tHealthBarContainer,\n\tFaangHeader,\n\tFaangContent,\n\tEnemyRank,\n} from './SCEnemyField';\n\nfunction EnemyField({ enemyUnits, functions }) {\n\tconst [enemyInfo, setEnemyInfo] = useState('');\n\n\tuseEffect(() => {}, [enemyUnits]);\n\n\treturn (\n\t\t<EnemyFieldWrapper>\n\t\t\t<EnemyFieldLabel>\n\t\t\t\t<h3>Enemies Remaining: {enemyUnits.length}</h3>\n\t\t\t</EnemyFieldLabel>\n\t\t\t<EnemyFlexContainer>\n\t\t\t\t{enemyUnits.slice(0, 5).map((unit) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<FaangContainer\n\t\t\t\t\t\t\tunit={unit}\n\t\t\t\t\t\t\tkey={enemyUnits.indexOf(unit)}\n\t\t\t\t\t\t\tonClick={() => functions.choose(unit)}>\n\t\t\t\t\t\t\t<FaangContent unit={unit}>\n\t\t\t\t\t\t\t\t<FaangHeader unit={unit}>\n\t\t\t\t\t\t\t\t\t<FaangName>\n\t\t\t\t\t\t\t\t\t\t<h4>{unit.pedigree}</h4>\n\t\t\t\t\t\t\t\t\t\t<h4>{unit.name}</h4>\n\t\t\t\t\t\t\t\t\t</FaangName>\n\t\t\t\t\t\t\t\t</FaangHeader>\n\t\t\t\t\t\t\t\t<HealthBarContainer unit={unit}>\n\t\t\t\t\t\t\t\t\t<HealthBar\n\t\t\t\t\t\t\t\t\t\tunit={unit}\n\t\t\t\t\t\t\t\t\t\tpercent={Math.ceil(\n\t\t\t\t\t\t\t\t\t\t\t(unit.currentHealth /\n\t\t\t\t\t\t\t\t\t\t\t\tunit.maxHealth) *\n\t\t\t\t\t\t\t\t\t\t\t\t100\n\t\t\t\t\t\t\t\t\t\t)}>\n\t\t\t\t\t\t\t\t\t\t{Math.ceil(\n\t\t\t\t\t\t\t\t\t\t\t(unit.currentHealth /\n\t\t\t\t\t\t\t\t\t\t\t\tunit.maxHealth) *\n\t\t\t\t\t\t\t\t\t\t\t\t100\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t%\n\t\t\t\t\t\t\t\t\t</HealthBar>\n\t\t\t\t\t\t\t\t</HealthBarContainer>\n\t\t\t\t\t\t\t</FaangContent>\n\t\t\t\t\t\t\t<EnemyRank>\n\t\t\t\t\t\t\t\t<h5>{unit.rank}</h5>\n\t\t\t\t\t\t\t\t<h5>{unit.species}</h5>\n\t\t\t\t\t\t\t</EnemyRank>\n\t\t\t\t\t\t</FaangContainer>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</EnemyFlexContainer>\n\t\t</EnemyFieldWrapper>\n\t);\n}\n\nexport default EnemyField;\n","/Users/esquire/code/projects/enter-the-faang/league/src/components/PlayerField/PlayerField.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/KingdomField/KingdomField.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/KingdomField/SCKingdomField.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/PlayerField/SCPlayerField.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/EnemyField/SCEnemyField.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/Data/SessionLogic.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/GameContext.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/Data/Cards.js",["115","116","117","118","119","120","121"],"import { calculations, session } from '../Data/SessionLogic'\n\nclass Card {\n    constructor(name, strength, energy) {\n        this.name = name;\n        this.strength = strength;\n        this.energy = energy;\n        this.isUsed = false;\n    }\n}\n// HEX COLORS\n// ATTACK = #FFA936, #806441\n// DEFENSE = #51A3A3, #387070\n// SUPPORT = #DD7373, #A35555\nclass AttackCard extends Card {\n\tconstructor(name, strength, energy) {\n        super(name, strength, energy);\n        // SPECIFIC TO THIS CLASS\n        this.type = 'Attack'\n        this.colors = {\n\t\t\tprimary: '#FFA936',\n\t\t\tsecondary: '#806441',\n\t\t};\n        this.description = `Deals damage to the enemy with ${this.strength} power.`;\n\t}\n\teffect(initiator, target) {\n        let percent\n        this.speed = initiator.speed\n        // IF INITIATOR HAS ENOUGH ENERGY AND HAS A VALID TARGET\n        if (initiator !== target && initiator.energy >= this.energy && initiator.isAlive) {\n\t\t\t// DO DAMAGE\n\t\t\ttarget.currentHealth -= calculations.playerDamageCalc(\n\t\t\t\tinitiator,\n\t\t\t\ttarget,\n\t\t\t\tthis.strength,\n\t\t\t\tsession\n\t\t\t);\n\t\t\t// USE THIS CARD SO IT IS SPLICED\n\t\t\tthis.isUsed = true;\n\t\t\t// SUBTRACT ENERGY COST\n\t\t\tinitiator.energy -= this.energy;\n\t\t\tif (target.currentHealth <= 0) {\n\t\t\t\ttarget.isAlive = false;\n\t\t\t}\n\t\t\t// CALCULATE PERCENTAGE FOR DISPLAY\n\t\t\tpercent = Math.ceil(\n\t\t\t\t(target.currentHealth / target.maxHealth) * 100\n\t\t\t);\n\t\t\t// IF ZENSCAPE IS FLASH ADD FLASH STATUS TO THEM\n\t\t\tif (\n\t\t\t\tsession.currentZenscape.name === 'Flash' &&\n\t\t\t\tMath.random() * 100 < session.currentZenscape.intensity\n\t\t\t) {\n\t\t\t\ttarget.status.flash = true\n\t\t\t}\n\t\t}\n        // IF INITIATOR IS TARGET CHOOSE NEW TARGET\n            if (initiator === target) {\n                console.log('CHOOSE NEW TARGET');\n            }\n            // IF INITIATOR DOES NOT HAVE ENOUGH ENERGY THIS CAN'T BE USED\n            if (initiator.energy < this.energy) {\n                console.log('THIS TITAN DOES NOT HAVE ENOUGH ENERGY');\n            }\n            // RESET ENERGY (WILL PROBABLY CHANCE)\n            initiator.energy = initiator.showcase.energy\n            // IF TARGET DIED FROM ATTACK\n            if (target.currentHealth <= 0) {\n                target.isAlive = false\n                return {\n\t\t\t\t\tevent: `card ${this.name} was used by ${initiator.name} to attack ${target.name} and it was defeated`,\n\t\t\t\t\tbgColor: initiator.showcase.colors.secondary,\n\t\t\t\t\tcolor: '#000',\n                };\n                // IF TARGET DID NOT DIE FROM THE ATTACK\n            } else return {\n\t\t\t\tevent: `card ${this.name} was used by ${initiator.name} to attack ${target.name} and now it has ${percent}% health remaining`,\n\t\t\t\tbgColor: initiator.showcase.colors.secondary,\n                color: '#000',\n                border: 'red'\n\t\t\t};\n\t}\n}\n\nclass HealCard extends Card {\n\tconstructor(name, strength, energy) {\n\t\tsuper(name, strength, energy);\n        // SPECIFIC TO THIS CLASS\n        this.type = 'Heal'\n\t\tthis.colors = {\n\t\t\tprimary: '#51A3A3',\n\t\t\tsecondary: '#387070',\n\t\t};\n        this.description = `Heals the target with ${this.strength} power.`;\n\t}\n\teffect(initiator, target) {\n        let percent\n        this.speed = initiator.speed;\n        let res = null\n        if (target.isFaang) {\n            console.log('CHOOSE NEW TARGET')\n        }\n\t\tif (initiator !== target && initiator.energy >= this.energy && !target.isFaang) {\n\t\t\tthis.isUsed = true;\n            initiator.energy -= this.energy;\n            // calculations.healCalc(initiator, target, this.strength, session)\n            if (initiator.isAlive && target.isAlive) {\n                if (\n\t\t\t\t\t(target.currentHealth +\n\t\t\t\t\t\tcalculations.healCalc(\n\t\t\t\t\t\t\tinitiator,\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tthis.strength,\n\t\t\t\t\t\t\tsession\n\t\t\t\t\t\t)) >\n\t\t\t\t\ttarget.maxHealth\n\t\t\t\t) {\n\t\t\t\t\ttarget.currentHealth = target.maxHealth;\n\t\t\t\t} else {\n                    target.currentHealth += (calculations.healCalc(\n                        initiator,\n\t\t\t\t\t\ttarget,\n\t\t\t\t\t\tthis.strength,\n\t\t\t\t\t\tsession\n                        ))\n                    }\n                percent = Math.ceil(\n                    (target.currentHealth / target.maxHealth) * 100\n                );\n                res = `${initiator.name} used Card ${this.name} to heal ${target.name}, and now it has ${percent}% health remaining`\n                console.log(initiator)\n            } else res = `${initiator.name} used Card ${this.name} in an attempt to heal ${target.name}, but it was defeated before it could be healed`;\n\t\t}\n\t\tif (initiator === target) {\n\t\t\tconsole.log('CHOOSE NEW TARGET');\n\t\t}\n\t\tif (initiator.energy < this.energy) {\n\t\t\tconsole.log('THIS TITAN DOES NOT HAVE ENOUGH ENERGY');\n\t\t}\n        initiator.energy = initiator.showcase.energy;\n        console.log('INITIATOR:', initiator.showcase)\n            return {\n\t\t\t\tevent: res,\n\t\t\t\tbgColor: initiator.showcase.colors.secondary,\n                color: '#000',\n                border: 'green'\n\t\t\t};\n\t}\n}\n\nclass SupportCard extends Card {\n\tconstructor(name, type, strength, energy) {\n\t\tsuper(name, type, strength, energy);\n        // SPECIFIC TO THIS CLASS\n        this.type = 'Support'\n\t\tthis.colors = {\n\t\t\tprimary: '#DD7373',\n\t\t\tsecondary: '#A35555',\n\t\t};\n\t\tthis.description = `Heals the target with ${this.strength} power.`;\n\t}\n\teffect(initiator, target) {\n\t\tthis.speed = initiator.speed;\n\t\tif (initiator !== target && initiator.energy >= this.energy) {\n\t\t\tthis.isUsed = true\n            console.log('it works')\n\t\t}\n\n\t\tif (initiator === target) {\n\t\t\tconsole.log('CHOOSE NEW TARGET');\n\t\t}\n\t\tif (initiator.energy < this.energy) {\n\t\t\tconsole.log('THIS TITAN DOES NOT HAVE ENOUGH ENERGY');\n\t\t}\n        initiator.energy = initiator.showcase.energy;\n            return {\n                event: '======= FIGURE OUT WHAT THE SUPPORTS DO =======',\n                color: this.colors.secondary,\n            };\n\t}\n}\n\nconst aTest = new AttackCard('a test', 1, 1)\nconst aTest2 = new AttackCard('a test2', 2, 2)\nconst aTest3 = new AttackCard('a test3', 3, 3)\nconst aTest4 = new AttackCard('a test4', 4, 4)\nconst aTest5 = new AttackCard('a test5', 5, 5)\nconst aTest6 = new AttackCard('a test6', 6, 6)\nconst aTest7 = new AttackCard('a test7', 7, 7)\nconst hTest = new HealCard('h test', 1, 1)\nconst hTest2 = new HealCard('h test2', 2, 2)\nconst hTest3 = new HealCard('h test3', 3, 3)\nconst hTest4 = new HealCard('h test4', 4, 4)\nconst hTest5 = new HealCard('h test5', 5, 5)\nconst hTest6 = new HealCard('h test6', 6, 6)\nconst hTest7 = new HealCard('h test7', 7, 7)\nconst sTest = new SupportCard('s test', 1, 1)\nconst sTest2 = new SupportCard('s test2', 2, 2)\nconst sTest3 = new SupportCard('s test3', 3, 3)\nconst sTest4 = new SupportCard('s test4', 4, 4)\nconst sTest5 = new SupportCard('s test5', 5, 5)\nconst sTest6 = new SupportCard('s test6', 6, 6)\nconst sTest7 = new SupportCard('s test7', 7, 7)\n\nexport const fullDeck = [\n    // 1\n\taTest,\n    hTest,\n    // sTest,\n    // 2\n\taTest2,\n    hTest2,\n    // sTest2,\n    // 3\n\taTest3,\n    hTest3,\n    // sTest3,\n    // 4\n\taTest4,\n    hTest4,\n    // sTest4,\n    // 5\n\taTest5,\n    hTest5,\n    // sTest5,\n    // 6\n\taTest6,\n    hTest6,\n    // sTest6,\n    //7\n\taTest7,\n    hTest7,\n    // sTest7\n];\n\nexport const allCards = session.shuffle(fullDeck)","/Users/esquire/code/projects/enter-the-faang/league/src/Pages/GameBoard/SCGameBoard.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/GameRules/GameRules.js",["122"],"import React, { useEffect, useRef } from 'react';\nimport {\n\tCloseButton,\n\tGameRulesWrapper,\n\tLoseDiv,\n\tRulesDiv,\n\tRulesFlexContainer,\n\tRulesH3,\n\tRulesHeading,\n\tRulesLI,\n\tRulesOL,\n\tRulesP,\n\tWinDiv\n} from './SCGameRules';\nfunction GameRules ({ showRules, setShowRules }) {\n\tconst panel = useRef();\n\n\tconst handleClick = (e) => {\n\t\tif (!panel.current.contains(e.target)) {\n\t\t\tsetShowRules(!showRules);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tdocument.addEventListener('mousedown', handleClick);\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener('mousedown', handleClick);\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<GameRulesWrapper ref={panel}>\n\t\t\t<CloseButton onClick={() => setShowRules(false)}>&times;</CloseButton>\n\t\t\t<RulesHeading>Rules</RulesHeading>\n\t\t\t<RulesFlexContainer>\n\t\t\t\t<WinDiv>\n\t\t\t\t\t<RulesH3>Win</RulesH3>\n\t\t\t\t\t<RulesP>Defeat all the Faangs</RulesP>\n\t\t\t\t</WinDiv>\n\t\t\t\t<LoseDiv>\n\t\t\t\t\t<RulesH3>Lose</RulesH3>\n\t\t\t\t\t<RulesP>Lose all of your titans</RulesP>\n\t\t\t\t\t<RulesP>Lose all of your kingdoms</RulesP>\n\t\t\t\t</LoseDiv>\n\t\t\t</RulesFlexContainer>\n\n\t\t\t<RulesDiv>\n\t\t\t\t<RulesH3>Turns</RulesH3>\n\t\t\t\t<RulesOL>\n\t\t\t\t\t<RulesLI>\n\t\t\t\t\t\tNew random cards are added to the players' hand from the\n\t\t\t\t\t\tdeck\n\t\t\t\t\t</RulesLI>\n\t\t\t\t\t<RulesLI>\n\t\t\t\t\t\tSwap titans between active ones and reserves (optional)\n\t\t\t\t\t</RulesLI>\n\t\t\t\t\t<RulesLI>\n\t\t\t\t\t\tSelect the card, the titan to use it, and the target\n\t\t\t\t\t</RulesLI>\n\t\t\t\t\t<RulesLI>\n\t\t\t\t\t\tAfter <button>End Turn</button> button is clicked all of\n\t\t\t\t\t\tthe units take their turns according to their speed\n\t\t\t\t\t</RulesLI>\n\t\t\t\t\t<RulesLI>\n\t\t\t\t\t\tIf units are defeated, they are replaced after the\n\t\t\t\t\t\tdamage step\n\t\t\t\t\t</RulesLI>\n\t\t\t\t</RulesOL>\n\t\t\t</RulesDiv>\n\t\t</GameRulesWrapper>\n\t);\n};\n\nexport default GameRules;\n","/Users/esquire/code/projects/enter-the-faang/league/src/components/GameRules/SCGameRules.js",[],"/Users/esquire/code/projects/enter-the-faang/league/src/components/SessionInfo/SessionInfo.js",[],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"123","replacedBy":"127"},{"ruleId":"125","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":41,"column":5,"nodeType":"131","endLine":41,"endColumn":7,"suggestions":"132"},{"ruleId":"129","severity":1,"message":"133","line":324,"column":7,"nodeType":"131","endLine":324,"endColumn":9,"suggestions":"134"},{"ruleId":"129","severity":1,"message":"135","line":391,"column":5,"nodeType":"131","endLine":391,"endColumn":7,"suggestions":"136"},{"ruleId":"129","severity":1,"message":"137","line":110,"column":5,"nodeType":"131","endLine":110,"endColumn":7,"suggestions":"138"},{"ruleId":"139","severity":1,"message":"140","line":9,"column":2,"nodeType":"141","messageId":"142","endLine":9,"endColumn":16},{"ruleId":"139","severity":1,"message":"143","line":13,"column":2,"nodeType":"141","messageId":"142","endLine":13,"endColumn":16},{"ruleId":"129","severity":1,"message":"144","line":396,"column":5,"nodeType":"131","endLine":396,"endColumn":72,"suggestions":"145"},{"ruleId":"139","severity":1,"message":"146","line":17,"column":9,"nodeType":"141","messageId":"142","endLine":17,"endColumn":18},{"ruleId":"139","severity":1,"message":"147","line":17,"column":20,"nodeType":"141","messageId":"142","endLine":17,"endColumn":32},{"ruleId":"139","severity":1,"message":"148","line":197,"column":7,"nodeType":"141","messageId":"142","endLine":197,"endColumn":12},{"ruleId":"139","severity":1,"message":"149","line":198,"column":7,"nodeType":"141","messageId":"142","endLine":198,"endColumn":13},{"ruleId":"139","severity":1,"message":"150","line":199,"column":7,"nodeType":"141","messageId":"142","endLine":199,"endColumn":13},{"ruleId":"139","severity":1,"message":"151","line":200,"column":7,"nodeType":"141","messageId":"142","endLine":200,"endColumn":13},{"ruleId":"139","severity":1,"message":"152","line":201,"column":7,"nodeType":"141","messageId":"142","endLine":201,"endColumn":13},{"ruleId":"139","severity":1,"message":"153","line":202,"column":7,"nodeType":"141","messageId":"142","endLine":202,"endColumn":13},{"ruleId":"139","severity":1,"message":"154","line":203,"column":7,"nodeType":"141","messageId":"142","endLine":203,"endColumn":13},{"ruleId":"129","severity":1,"message":"155","line":30,"column":5,"nodeType":"131","endLine":30,"endColumn":7,"suggestions":"156"},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],["157"],["158"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'staticTitans'. Either include it or remove the dependency array. You can also do a functional update 'setStaticTitans(s => ...)' if you only need 'staticTitans' in the 'setStaticTitans' call.","ArrayExpression",["159"],"React Hook useEffect has missing dependencies: 'airTitan', 'fireTitan', 'lightningTitan', 'metalTitan', 'setPlayerTeam', 'stoneTitan', 'terraTitan', and 'waterTitan'. Either include them or remove the dependency array. If 'setPlayerTeam' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["160"],"React Hook useEffect has missing dependencies: 'setEnemyUnits' and 'unitPool'. Either include them or remove the dependency array. If 'setEnemyUnits' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["161"],"React Hook useEffect has missing dependencies: 'airKingdom', 'fireKingdom', 'lightningKingdom', 'metalKingdom', 'setPlayerKingdoms', 'stoneKingdom', 'terraKingdom', and 'waterKingdom'. Either include them or remove the dependency array. If 'setPlayerKingdoms' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["162"],"no-unused-vars","'BoardContainer' is defined but never used.","Identifier","unusedVar","'GameRulesModal' is defined but never used.","React Hook useEffect has missing dependencies: 'listUnits' and 'setAllUnitsOnField'. Either include them or remove the dependency array. If 'setAllUnitsOnField' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["163"],"'enemyInfo' is assigned a value but never used.","'setEnemyInfo' is assigned a value but never used.","'sTest' is assigned a value but never used.","'sTest2' is assigned a value but never used.","'sTest3' is assigned a value but never used.","'sTest4' is assigned a value but never used.","'sTest5' is assigned a value but never used.","'sTest6' is assigned a value but never used.","'sTest7' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleClick'. Either include it or remove the dependency array.",["164"],"no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},"Update the dependencies array to be: [staticTitans]",{"range":"177","text":"178"},"Update the dependencies array to be: [airTitan, fireTitan, lightningTitan, metalTitan, setPlayerTeam, stoneTitan, terraTitan, waterTitan]",{"range":"179","text":"180"},"Update the dependencies array to be: [setEnemyUnits, unitPool]",{"range":"181","text":"182"},"Update the dependencies array to be: [airKingdom, fireKingdom, lightningKingdom, metalKingdom, setPlayerKingdoms, stoneKingdom, terraKingdom, waterKingdom]",{"range":"183","text":"184"},"Update the dependencies array to be: [enemyUnits, playerTeam, playerKingdoms, session, session.eventLog, setAllUnitsOnField, listUnits]",{"range":"185","text":"186"},"Update the dependencies array to be: [handleClick]",{"range":"187","text":"188"},[933,935],"[staticTitans]",[8967,8969],"[airTitan, fireTitan, lightningTitan, metalTitan, setPlayerTeam, stoneTitan, terraTitan, waterTitan]",[9432,9434],"[setEnemyUnits, unitPool]",[2811,2813],"[airKingdom, fireKingdom, lightningKingdom, metalKingdom, setPlayerKingdoms, stoneKingdom, terraKingdom, waterKingdom]",[11100,11167],"[enemyUnits, playerTeam, playerKingdoms, session, session.eventLog, setAllUnitsOnField, listUnits]",[568,570],"[handleClick]"]